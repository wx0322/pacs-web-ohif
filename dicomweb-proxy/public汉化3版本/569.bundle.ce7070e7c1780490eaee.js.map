{"version":3,"file":"569.bundle.ce7070e7c1780490eaee.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/_hydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(\r\n  ToolGroupService,\r\n  toolGroupId,\r\n  extensionManager\r\n) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.tools'\r\n  );\r\n\r\n  const { toolNames, Enums } = utilityModule.exports;\r\n\r\n  const tools = {\r\n    active: [\r\n      {\r\n        toolName: toolNames.WindowLevel,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Pan,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Zoom,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\r\n      },\r\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\r\n    ],\r\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\r\n  };\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools, {});\r\n}\r\n\r\nexport default createSEGToolGroupAndAddTools;\r\n","async function _hydrateSEGDisplaySet({\r\n  segDisplaySet,\r\n  viewportIndex,\r\n  toolGroupId,\r\n  servicesManager,\r\n}) {\r\n  const {\r\n    SegmentationService,\r\n    HangingProtocolService,\r\n    ViewportGridService,\r\n  } = servicesManager.services;\r\n\r\n  const displaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\r\n\r\n  let segmentationId = null;\r\n\r\n  // We need the hydration to notify panels about the new segmentation added\r\n  const suppressEvents = false;\r\n\r\n  segmentationId = await SegmentationService.createSegmentationForSEGDisplaySet(\r\n    segDisplaySet,\r\n    segmentationId,\r\n    suppressEvents\r\n  );\r\n\r\n  SegmentationService.hydrateSegmentation(segDisplaySet.displaySetInstanceUID);\r\n\r\n  const { viewports } = ViewportGridService.getState();\r\n\r\n  const updatedViewports = HangingProtocolService.getViewportsRequireUpdate(\r\n    viewportIndex,\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  ViewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n\r\n  // Todo: fix this after we have a better way for stack viewport segmentations\r\n\r\n  // check every viewport in the viewports to see if the displaySetInstanceUID\r\n  // is being displayed, if so we need to update the viewport to use volume viewport\r\n  // (if already is not using it) since Cornerstone3D currently only supports\r\n  // volume viewport for segmentation\r\n  viewports.forEach((viewport, index) => {\r\n    if (index === viewportIndex) {\r\n      return;\r\n    }\r\n\r\n    const shouldDisplaySeg = SegmentationService.shouldRenderSegmentation(\r\n      viewport.displaySetInstanceUIDs,\r\n      segDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (shouldDisplaySeg) {\r\n      ViewportGridService.setDisplaySetsForViewport({\r\n        viewportIndex: index,\r\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\r\n        viewportOptions: {\r\n          viewportType: 'volume',\r\n          toolGroupId,\r\n          initialImageOptions: {\r\n            preset: 'middle',\r\n          },\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\nexport default _hydrateSEGDisplaySet;\r\n","import hydrateSEGDisplaySet from './_hydrateSEG';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  HYDRATE_SEG: 5,\r\n};\r\n\r\nfunction promptHydrateSEG({\r\n  servicesManager,\r\n  segDisplaySet,\r\n  viewportIndex,\r\n  toolGroupId = 'default',\r\n}) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    const promptResult = await _askHydrate(\r\n      UIViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\r\n      const isHydrated = await hydrateSEGDisplaySet({\r\n        segDisplaySet,\r\n        viewportIndex,\r\n        toolGroupId,\r\n        servicesManager,\r\n      });\r\n\r\n      resolve(isHydrated);\r\n    }\r\n  });\r\n}\r\n\r\nfunction _askHydrate(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message = 'Do you want to open this Segmentation?';\r\n    const actions = [\r\n      {\r\n        type: 'secondary',\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_SEG,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateSEG;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n  LoadingIndicatorProgress,\r\n} from '@ohif/ui';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\r\nimport _hydrateSEGDisplaySet from '../utils/_hydrateSEG';\r\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\r\nimport _getStatusComponent from './_getStatusComponent';\r\n\r\nconst { formatDate } = utils;\r\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\r\n\r\nfunction OHIFCornerstoneSEGViewport(props) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportOptions,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('SEGViewport');\r\n\r\n  const {\r\n    DisplaySetService,\r\n    ToolGroupService,\r\n    SegmentationService,\r\n    UINotificationService,\r\n  } = servicesManager.services;\r\n\r\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportIndex}`;\r\n\r\n  // SEG viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SEG viewport should only have a single display set');\r\n  }\r\n\r\n  const segDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\r\n\r\n  // States\r\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\r\n  const [selectedSegment, setSelectedSegment] = useState(1);\r\n\r\n  // Hydration means that the SEG is opened and segments are loaded into the\r\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\r\n  // loading basically means SEG loading over network and bit unpacking of the\r\n  // SEG data.\r\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\r\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\r\n  const [element, setElement] = useState(null);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    segmentIndex: 1,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportIndex } = viewportGrid;\r\n\r\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const onElementDisabled = () => {\r\n    setElement(null);\r\n  };\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const {\r\n      displaySet: referencedDisplaySet,\r\n    } = referencedDisplaySetRef.current;\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <Component\r\n        {...props}\r\n        displaySets={[referencedDisplaySet, segDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'volume',\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n        }}\r\n        onElementEnabled={onElementEnabled}\r\n        onElementDisabled={onElementDisabled}\r\n        // initialImageIndex={initialImageIndex}\r\n      ></Component>\r\n    );\r\n  }, [viewportIndex, segDisplaySet, toolGroupId]);\r\n\r\n  const onSegmentChange = useCallback(\r\n    direction => {\r\n      direction = direction === 'left' ? -1 : 1;\r\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\r\n      const segmentation = SegmentationService.getSegmentation(segmentationId);\r\n\r\n      const { segments } = segmentation;\r\n\r\n      const numberOfSegments = Object.keys(segments).length;\r\n\r\n      let newSelectedSegmentIndex = selectedSegment + direction;\r\n\r\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\r\n        newSelectedSegmentIndex = 1;\r\n      } else if (newSelectedSegmentIndex === 0) {\r\n        newSelectedSegmentIndex = numberOfSegments - 1;\r\n      }\r\n\r\n      SegmentationService.jumpToSegmentCenter(\r\n        segmentationId,\r\n        newSelectedSegmentIndex,\r\n        toolGroupId\r\n      );\r\n      setSelectedSegment(newSelectedSegmentIndex);\r\n    },\r\n    [selectedSegment]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (segIsLoading) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateSEG({\r\n      servicesManager,\r\n      viewportIndex,\r\n      segDisplaySet,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  }, [servicesManager, viewportIndex, segDisplaySet, segIsLoading]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = SegmentationService.subscribe(\r\n      SegmentationService.EVENTS.SEGMENTATION_PIXEL_DATA_CREATED,\r\n      evt => {\r\n        if (\r\n          evt.segDisplaySet.displaySetInstanceUID ===\r\n          segDisplaySet.displaySetInstanceUID\r\n        ) {\r\n          setSegIsLoading(false);\r\n        }\r\n\r\n        if (evt.overlappingSegments) {\r\n          UINotificationService.show({\r\n            title: 'Overlapping Segments',\r\n            message:\r\n              'Overlapping segments detected which is not currently supported',\r\n            type: 'warning',\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = SegmentationService.subscribe(\r\n      SegmentationService.EVENTS.SEGMENT_PIXEL_DATA_CREATED,\r\n      ({ segmentIndex, numSegments }) => {\r\n        setProcessingProgress({\r\n          segmentIndex,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\r\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports[activeViewportIndex];\r\n        if (\r\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\r\n        ) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = ToolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    toolGroup = createSEGToolGroupAndAddTools(\r\n      ToolGroupService,\r\n      toolGroupId,\r\n      extensionManager\r\n    );\r\n\r\n    setToolGroupCreated(true);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      SegmentationService.removeSegmentationRepresentationFromToolGroup(\r\n        toolGroupId\r\n      );\r\n\r\n      ToolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(segDisplaySet.isHydrated);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      SegmentationService.removeSegmentationRepresentationFromToolGroup(\r\n        toolGroupId\r\n      );\r\n      referencedDisplaySetRef.current = null;\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n    SeriesNumber,\r\n  } = referencedDisplaySetRef.current.metadata;\r\n\r\n  const onPillClick = () => {\r\n    promptHydrateSEG({\r\n      servicesManager,\r\n      viewportIndex,\r\n      segDisplaySet,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onArrowsClick={onSegmentChange}\r\n        getStatusComponent={() => {\r\n          return _getStatusComponent({\r\n            isHydrated,\r\n            onPillClick,\r\n          });\r\n        }}\r\n        studyData={{\r\n          label: viewportLabel,\r\n          useAltStyling: true,\r\n          studyDate: formatDate(StudyDate),\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: `SEG Viewport ${SeriesDescription}`,\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {segIsLoading && (\r\n          <LoadingIndicatorProgress\r\n            className=\"w-full h-full\"\r\n            progress={\r\n              processingProgress.totalSegments !== null\r\n                ? ((processingProgress.segmentIndex + 1) /\r\n                    processingProgress.totalSegments) *\r\n                  100\r\n                : null\r\n            }\r\n            textBlock={\r\n              !processingProgress.totalSegments ? (\r\n                <span className=\"text-white text-sm\">Loading SEG ...</span>\r\n              ) : (\r\n                <span className=\"text-white text-sm flex items-baseline space-x-2\">\r\n                  <div>Loading Segment</div>\r\n                  <div className=\"w-3\">{`${processingProgress.segmentIndex}`}</div>\r\n                  <div>/</div>\r\n                  <div>{`${processingProgress.totalSegments}`}</div>\r\n                </span>\r\n              )\r\n            }\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              id=\"viewport-notification\"\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneSEGViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nOHIFCornerstoneSEGViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneSEGViewport;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { Icon, Tooltip } from '@ohif/ui';\r\n\r\nimport _hydrateSEGDisplaySet from '../utils/_hydrateSEG';\r\n\r\nexport default function _getStatusComponent({ isHydrated, onPillClick }) {\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (isHydrated) {\r\n    case true:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 rounded-full\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n            backgroundColor: '#98e5c1',\r\n            border: 'solid 1.5px #000000',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"exclamation\"\r\n            style={{ color: '#000', width: '12px', height: '12px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => (\r\n        <div>This Segmentation is loaded in the segmentation panel</div>\r\n      );\r\n      break;\r\n    case false:\r\n      StatusIcon = () => (\r\n        <div\r\n          className=\"flex items-center justify-center -mr-1 bg-white rounded-full group-hover:bg-customblue-200\"\r\n          style={{\r\n            width: '18px',\r\n            height: '18px',\r\n            border: 'solid 1.5px #000000',\r\n          }}\r\n        >\r\n          <Icon\r\n            name=\"arrow-left\"\r\n            style={{ color: '#000', width: '14px', height: '14px' }}\r\n          />\r\n        </div>\r\n      );\r\n\r\n      ToolTipMessage = () => <div>Click to load segmentation.</div>;\r\n  }\r\n\r\n  const StatusPill = () => (\r\n    <div\r\n      className={classNames(\r\n        'group relative flex items-center justify-center px-8 rounded-full cursor-default bg-customgreen-100',\r\n        {\r\n          'hover:bg-customblue-100': !isHydrated,\r\n          'cursor-pointer': !isHydrated,\r\n        }\r\n      )}\r\n      style={{\r\n        height: '24px',\r\n        width: '55px',\r\n      }}\r\n      onClick={() => {\r\n        if (!isHydrated) {\r\n          if (onPillClick) {\r\n            onPillClick();\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"pr-1 text-base font-medium leading-none text-black\">\r\n        SEG\r\n      </div>\r\n      <StatusIcon />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\r\n          <StatusPill />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusPill />}\r\n    </>\r\n  );\r\n}\r\n"],"names":["ToolGroupService","toolGroupId","extensionManager","getModuleEntry","exports","toolNames","Enums","tools","active","toolName","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","enabled","SegmentationDisplay","createToolGroupAndAddTools","segDisplaySet","viewportIndex","servicesManager","services","SegmentationService","HangingProtocolService","ViewportGridService","displaySetInstanceUID","referencedDisplaySetInstanceUID","segmentationId","createSegmentationForSEGDisplaySet","hydrateSegmentation","getState","viewports","updatedViewports","getViewportsRequireUpdate","setDisplaySetsForViewports","forEach","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","setDisplaySetsForViewport","viewportOptions","viewportType","initialImageOptions","preset","RESPONSE","_askHydrate","UIViewportDialogService","Promise","resolve","reject","actions","type","text","value","show","message","onSubmit","result","hide","onOutsideClick","hydrateSEGDisplaySet","isHydrated","formatDate","utils","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportLabel","useTranslation","t","DisplaySetService","UINotificationService","length","Error","useViewportGrid","viewportGrid","viewportGridService","useViewportDialog","viewportDialogState","useState","setToolGroupCreated","selectedSegment","setSelectedSegment","setIsHydrated","isLoaded","segIsLoading","setSegIsLoading","setElement","segmentIndex","totalSegments","processingProgress","setProcessingProgress","referencedDisplaySetRef","useRef","activeViewportIndex","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","element","onElementDisabled","getCornerstoneViewport","useCallback","Component","component","orientation","viewportId","onSegmentChange","direction","segments","getSegmentation","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_PIXEL_DATA_CREATED","overlappingSegments","title","SEGMENT_PIXEL_DATA_CREATED","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","activeViewport","includes","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","React","key","onPillClick","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","className","style","width","height","backgroundColor","border","name","color","StatusPill","classNames","onClick","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","progress","textBlock","id","propTypes","PropTypes","dataSource","customProps","defaultProps"],"sourceRoot":""}