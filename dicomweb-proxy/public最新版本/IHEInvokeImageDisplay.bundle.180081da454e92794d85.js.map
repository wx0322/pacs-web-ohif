{"version":3,"sources":["webpack:///./routes/IHEInvokeImageDisplay.js","webpack:///./customHooks/usePrevious.js","webpack:///D:/dev/dicomweb/Viewers/node_modules/lodash/_baseValues.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js","webpack:///D:/dev/dicomweb/Viewers/node_modules/lodash/values.js"],"names":["UrlUtil","OHIF","utils","urlUtil","IHEInvokeImageDisplay","location","parse","search","requestType","studyUID","studyInstanceUIDs","split","paramString","parseParam","propTypes","PropTypes","shape","string","isRequired","withRouter","usePrevious","value","ref","useRef","useEffect","current","arrayMap","module","exports","object","props","key","OHIFStudyMetadata","metadata","OHIFSeriesMetadata","retrieveStudiesMetadata","studies","deleteStudyMetadataPromise","studyMetadataManager","makeCancelable","_promoteList","study","studyMetadata","filters","isFilterStrategy","promoted","_promoteStudyDisplaySet","list","values","searchMethod","listCopy","response","promotedCount","arrayValues","Object","keys","length","seriesInstanceUID","promotedResponse","getDisplaySets","valueToCompare","displaySet","SeriesInstanceUID","forEach","index","findIndex","bind","undefined","itemToPromote","splice","data","displaySets","_isQueryParamApplied","applied","seriesInstanceUIDs","validateFilterApplied","arrayToInspect","every","item","some","seriesInstanceUIDStr","validatePromoteApplied","isValid","resultSeries","series","validateMethod","_showUserMessage","queryParamApplied","message","dialog","show","showUserMessage","_addSeriesToStudy","sopClassHandlerModules","extensionManager","modules","getData","seriesMetadata","getSeriesByUID","updateSeries","addSeries","createAndAddDisplaySetsForSeries","derivedDisplaySets","getDerivedDatasets","Modality","_updateStudyMetadataManager","StudyInstanceUID","get","add","_updateStudyDisplaySets","createDisplaySets","_addDerivedDisplaySets","_thinStudyData","map","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","server","clearViewportSpecificData","setStudyData","useState","error","setError","setStudies","isStudyLoaded","setIsStudyLoaded","snackbarContext","useSnackbarContext","useContext","AppContext","appConfig","filterQueryParam","maxConcurrentMetadataRequests","processStudies","studiesData","Array","isArray","loadRemainingSeries","then","result","isCanceled","isQueryParamApplied","studyDidLoad","catch","log","finally","seriesLoader","loadNextSeries","hasNext","next","concurrentRequestsAllowed","getSeriesCount","promises","fill","Promise","all","remainingPromises","loadStudies","retrieveParams","push","splitQueryParameterCalls","enableGoogleCloudAdapter","purgeCancellablePromises","useCallback","cancel","remove","prevStudyInstanceUIDs","e","includes","purge","content","JSON","stringify","NotFound","ConnectedViewer","array","func","redux","actions","isActive","a","active","ConnectedViewerRetrieveStudyData","connect","state","ownProps","activeServer","servers","find","dispatch","baseValues"],"mappings":"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","file":"IHEInvokeImageDisplay.bundle.180081da454e92794d85.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData.js';\r\nimport OHIF from '@ohif/core';\r\nconst { urlUtil: UrlUtil } = OHIF.utils;\r\n\r\nfunction IHEInvokeImageDisplay({ location }) {\r\n  const {\r\n    // patientID,\r\n    requestType,\r\n    studyUID,\r\n  } = UrlUtil.parse(location.search);\r\n\r\n  switch (requestType) {\r\n    case 'STUDY':\r\n      return (\r\n        <ConnectedViewerRetrieveStudyData\r\n          studyInstanceUIDs={studyUID.split(';')}\r\n        />\r\n      );\r\n\r\n    case 'STUDYBASE64':\r\n      return (\r\n        <ConnectedViewerRetrieveStudyData\r\n          studyInstanceUIDs={UrlUtil.paramString.parseParam(studyUID)}\r\n        />\r\n      );\r\n\r\n    case 'PATIENT':\r\n      // TODO: connect this to the StudyList when we have the filter parameters set up\r\n      // return <StudyList patientUIDs={patientID.split(';')} />;\r\n      return '';\r\n\r\n    default:\r\n      // TODO: Figure out what to do here, this won't work because StudyList expects studies\r\n      // return <StudyList />;\r\n      return '';\r\n  }\r\n}\r\n\r\nIHEInvokeImageDisplay.propTypes = {\r\n  location: PropTypes.shape({\r\n    search: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nexport default withRouter(IHEInvokeImageDisplay);\r\n","import React, { useEffect, useRef } from 'react';\r\nexport default function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n\r\n  return ref.current;\r\n}\r\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport { metadata, studies, utils, log } from '@ohif/core';\r\nimport usePrevious from '../customHooks/usePrevious';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport { useSnackbarContext, ErrorPage } from '@ohif/ui';\r\n\r\n// Contexts\r\nimport AppContext from '../context/AppContext';\r\nimport NotFound from '../routes/NotFound';\r\n\r\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\r\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\r\nconst { studyMetadataManager, makeCancelable } = utils;\r\n\r\nconst _promoteToFront = (list, values, searchMethod) => {\r\n  let listCopy = [...list];\r\n  let response = [];\r\n  let promotedCount = 0;\r\n\r\n  const arrayValues = values.split(',');\r\n  arrayValues.forEach(value => {\r\n    const index = listCopy.findIndex(searchMethod.bind(undefined, value));\r\n\r\n    if (index >= 0) {\r\n      const [itemToPromote] = listCopy.splice(index, 1);\r\n      response[promotedCount] = itemToPromote;\r\n      promotedCount++;\r\n    }\r\n  });\r\n\r\n  return {\r\n    promoted: promotedCount === arrayValues.length,\r\n    data: [...response, ...listCopy],\r\n  };\r\n};\r\n\r\n/**\r\n * Promote series to front if find found equivalent on filters object\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\r\n  let promoted = false;\r\n  // Promote only if no filter should be applied\r\n  if (!isFilterStrategy) {\r\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\r\n  let promoted = false;\r\n  const queryParamsLength = Object.keys(filters).length;\r\n  const shouldPromoteToFront = queryParamsLength > 0;\r\n\r\n  if (shouldPromoteToFront) {\r\n    const { seriesInstanceUID } = filters;\r\n\r\n    const _seriesLookup = (valueToCompare, displaySet) => {\r\n      return displaySet.SeriesInstanceUID === valueToCompare;\r\n    };\r\n    const promotedResponse = _promoteToFront(\r\n      studyMetadata.getDisplaySets(),\r\n      seriesInstanceUID,\r\n      _seriesLookup\r\n    );\r\n\r\n    study.displaySets = promotedResponse.data;\r\n    promoted = promotedResponse.promoted;\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\n/**\r\n * Method to identify if query param (from url) was applied to given list\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\r\n  const { seriesInstanceUID } = filters;\r\n  let applied = true;\r\n  // skip in case no filter or no toast manager\r\n\r\n  if (!seriesInstanceUID) {\r\n    return applied;\r\n  }\r\n  const seriesInstanceUIDs = seriesInstanceUID.split(',');\r\n\r\n  let validateFilterApplied = () => {\r\n    const sameSize = arrayToInspect.length === seriesInstanceUIDs.length;\r\n    if (!sameSize) {\r\n      return;\r\n    }\r\n\r\n    return arrayToInspect.every(item =>\r\n      seriesInstanceUIDs.some(\r\n        seriesInstanceUIDStr => seriesInstanceUIDStr === item.SeriesInstanceUID\r\n      )\r\n    );\r\n  };\r\n\r\n  let validatePromoteApplied = () => {\r\n    let isValid = true;\r\n    for (let index = 0; index < seriesInstanceUIDs.length; index++) {\r\n      const seriesInstanceUIDStr = seriesInstanceUIDs[index];\r\n      const resultSeries = arrayToInspect[index];\r\n\r\n      if (\r\n        !resultSeries ||\r\n        resultSeries.SeriesInstanceUID !== seriesInstanceUIDStr\r\n      ) {\r\n        isValid = false;\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  const { series = [], displaySets = [] } = study;\r\n  const arrayToInspect = isFilterStrategy ? series : displaySets;\r\n  const validateMethod = isFilterStrategy\r\n    ? validateFilterApplied\r\n    : validatePromoteApplied;\r\n\r\n  if (!arrayToInspect) {\r\n    applied = false;\r\n  } else {\r\n    applied = validateMethod();\r\n  }\r\n\r\n  return applied;\r\n};\r\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\r\n  if (queryParamApplied) {\r\n    return;\r\n  }\r\n\r\n  const { show: showUserMessage = () => {} } = dialog;\r\n  showUserMessage({\r\n    message,\r\n  });\r\n};\r\n\r\nconst _addSeriesToStudy = (studyMetadata, series) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n  const study = studyMetadata.getData();\r\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\r\n  const existingSeries = studyMetadata.getSeriesByUID(series.SeriesInstanceUID);\r\n  if (existingSeries) {\r\n    studyMetadata.updateSeries(series.SeriesInstanceUID, seriesMetadata);\r\n  } else {\r\n    studyMetadata.addSeries(seriesMetadata);\r\n  }\r\n\r\n  studyMetadata.createAndAddDisplaySetsForSeries(\r\n    sopClassHandlerModules,\r\n    seriesMetadata\r\n  );\r\n\r\n  study.displaySets = studyMetadata.getDisplaySets();\r\n  study.derivedDisplaySets = studyMetadata.getDerivedDatasets({\r\n    Modality: series.Modality,\r\n  });\r\n\r\n  _updateStudyMetadataManager(study, studyMetadata);\r\n};\r\n\r\nconst _updateStudyMetadataManager = (study, studyMetadata) => {\r\n  const { StudyInstanceUID } = study;\r\n\r\n  if (!studyMetadataManager.get(StudyInstanceUID)) {\r\n    studyMetadataManager.add(studyMetadata);\r\n  }\r\n};\r\n\r\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n\r\n  if (!study.displaySets) {\r\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n  }\r\n\r\n  if (study.derivedDisplaySets) {\r\n    studyMetadata._addDerivedDisplaySets(study.derivedDisplaySets);\r\n  }\r\n};\r\n\r\nconst _thinStudyData = study => {\r\n  return {\r\n    StudyInstanceUID: study.StudyInstanceUID,\r\n    series: study.series.map(item => ({\r\n      SeriesInstanceUID: item.SeriesInstanceUID,\r\n    })),\r\n  };\r\n};\r\n\r\nfunction ViewerRetrieveStudyData({\r\n  server,\r\n  studyInstanceUIDs,\r\n  seriesInstanceUIDs,\r\n  clearViewportSpecificData,\r\n  setStudyData,\r\n}) {\r\n  // hooks\r\n  const [error, setError] = useState(false);\r\n  const [studies, setStudies] = useState([]);\r\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\r\n  const snackbarContext = useSnackbarContext();\r\n  const { appConfig = {} } = useContext(AppContext);\r\n  const {\r\n    filterQueryParam: isFilterStrategy = false,\r\n    maxConcurrentMetadataRequests,\r\n  } = appConfig;\r\n\r\n  let cancelableSeriesPromises;\r\n  let cancelableStudiesPromises;\r\n  /**\r\n   * Callback method when study is totally loaded\r\n   * @param {object} study study loaded\r\n   * @param {object} studyMetadata studyMetadata for given study\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const studyDidLoad = (study, studyMetadata, filters) => {\r\n    // User message\r\n    const promoted = _promoteList(\r\n      study,\r\n      studyMetadata,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n\r\n    // Clear viewport to allow new promoted one to be displayed\r\n    if (promoted) {\r\n      clearViewportSpecificData(0);\r\n    }\r\n\r\n    const isQueryParamApplied = _isQueryParamApplied(\r\n      study,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n    // Show message in case not promoted neither filtered but should to\r\n    _showUserMessage(\r\n      isQueryParamApplied,\r\n      'Query parameters were not totally applied. It might be using original series list for given study.',\r\n      snackbarContext\r\n    );\r\n\r\n    setStudies([...studies, study]);\r\n  };\r\n\r\n  /**\r\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\r\n   * @param {Array} studiesData Array of studies retrieved from server\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filters.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const processStudies = (studiesData, filters) => {\r\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\r\n      // Map studies to new format, update metadata manager?\r\n      const studies = studiesData.map(study => {\r\n        setStudyData(study.StudyInstanceUID, _thinStudyData(study));\r\n        const studyMetadata = new OHIFStudyMetadata(\r\n          study,\r\n          study.StudyInstanceUID\r\n        );\r\n\r\n        _updateStudyDisplaySets(study, studyMetadata);\r\n        _updateStudyMetadataManager(study, studyMetadata);\r\n\r\n        // Attempt to load remaning series if any\r\n        cancelableSeriesPromises[study.StudyInstanceUID] = makeCancelable(\r\n          loadRemainingSeries(studyMetadata)\r\n        )\r\n          .then(result => {\r\n            if (result && !result.isCanceled) {\r\n              studyDidLoad(study, studyMetadata, filters);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            if (error && !error.isCanceled) {\r\n              setError(error);\r\n              log.error(error);\r\n            }\r\n          })\r\n          .finally(() => {\r\n            setIsStudyLoaded(true);\r\n          });\r\n\r\n        return study;\r\n      });\r\n\r\n      setStudies(studies);\r\n    }\r\n  };\r\n\r\n  const forceRerender = () => setStudies(studies => [...studies]);\r\n\r\n  const loadRemainingSeries = async studyMetadata => {\r\n    const { seriesLoader } = studyMetadata.getData();\r\n    if (!seriesLoader) return;\r\n\r\n    const loadNextSeries = async () => {\r\n      if (!seriesLoader.hasNext()) return;\r\n      const series = await seriesLoader.next();\r\n      _addSeriesToStudy(studyMetadata, series);\r\n      forceRerender();\r\n      return loadNextSeries();\r\n    };\r\n\r\n    const concurrentRequestsAllowed =\r\n      maxConcurrentMetadataRequests || studyMetadata.getSeriesCount();\r\n    const promises = Array(concurrentRequestsAllowed)\r\n      .fill(null)\r\n      .map(loadNextSeries);\r\n    const remainingPromises = await Promise.all(promises);\r\n    setIsStudyLoaded(true);\r\n    return remainingPromises;\r\n  };\r\n\r\n  const loadStudies = async () => {\r\n    try {\r\n      const filters = {};\r\n      // Use the first, discard others\r\n      const seriesInstanceUID = seriesInstanceUIDs && seriesInstanceUIDs[0];\r\n      const retrieveParams = [server, studyInstanceUIDs];\r\n\r\n      if (seriesInstanceUID) {\r\n        filters.seriesInstanceUID = seriesInstanceUID;\r\n        // Query param filtering controlled by appConfig property\r\n        if (isFilterStrategy) {\r\n          retrieveParams.push(filters);\r\n        }\r\n      }\r\n\r\n      if (\r\n        appConfig.splitQueryParameterCalls ||\r\n        appConfig.enableGoogleCloudAdapter\r\n      ) {\r\n        retrieveParams.push(true); // Seperate SeriesInstanceUID filter calls.\r\n      }\r\n\r\n      cancelableStudiesPromises[studyInstanceUIDs] = makeCancelable(\r\n        retrieveStudiesMetadata(...retrieveParams)\r\n      )\r\n        .then(result => {\r\n          if (result && !result.isCanceled) {\r\n            processStudies(result, filters);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          if (error && !error.isCanceled) {\r\n            setError(error);\r\n            log.error(error);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      if (error) {\r\n        setError(error);\r\n        log.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const purgeCancellablePromises = useCallback(() => {\r\n    for (let studyInstanceUIDs in cancelableStudiesPromises) {\r\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUIDs]) {\r\n        cancelableStudiesPromises[studyInstanceUIDs].cancel();\r\n      }\r\n    }\r\n\r\n    for (let studyInstanceUIDs in cancelableSeriesPromises) {\r\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUIDs]) {\r\n        cancelableSeriesPromises[studyInstanceUIDs].cancel();\r\n        deleteStudyMetadataPromise(studyInstanceUIDs);\r\n        studyMetadataManager.remove(studyInstanceUIDs);\r\n      }\r\n    }\r\n  });\r\n\r\n  const prevStudyInstanceUIDs = usePrevious(studyInstanceUIDs);\r\n\r\n  useEffect(() => {\r\n    const hasStudyInstanceUIDsChanged = !(\r\n      prevStudyInstanceUIDs &&\r\n      prevStudyInstanceUIDs.every(e => studyInstanceUIDs.includes(e))\r\n    );\r\n\r\n    if (hasStudyInstanceUIDsChanged) {\r\n      studyMetadataManager.purge();\r\n      purgeCancellablePromises();\r\n    }\r\n  }, [prevStudyInstanceUIDs, purgeCancellablePromises, studyInstanceUIDs]);\r\n\r\n  useEffect(() => {\r\n    cancelableSeriesPromises = {};\r\n    cancelableStudiesPromises = {};\r\n    loadStudies();\r\n\r\n    return () => {\r\n      purgeCancellablePromises();\r\n    };\r\n  }, []);\r\n\r\n  if (error) {\r\n    const content = JSON.stringify(error);\r\n    if (content.includes('404') || content.includes('NOT_FOUND')) {\r\n      return <NotFound />;\r\n    }\r\n\r\n    return <NotFound message=\"Failed to retrieve study data\" />;\r\n  }\r\n\r\n  return (\r\n    <ConnectedViewer\r\n      studies={studies}\r\n      isStudyLoaded={isStudyLoaded}\r\n      studyInstanceUIDs={studyInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nViewerRetrieveStudyData.propTypes = {\r\n  studyInstanceUIDs: PropTypes.array.isRequired,\r\n  seriesInstanceUIDs: PropTypes.array,\r\n  server: PropTypes.object,\r\n  clearViewportSpecificData: PropTypes.func.isRequired,\r\n  setStudyData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ViewerRetrieveStudyData;\r\n","import { connect } from 'react-redux';\r\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { clearViewportSpecificData, setStudyData } = OHIF.redux.actions;\r\nconst isActive = a => a.active === true;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const activeServer = state.servers.servers.find(isActive);\r\n\r\n  return {\r\n    server: ownProps.server || activeServer,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setStudyData: (StudyInstanceUID, data) => {\r\n      dispatch(setStudyData(StudyInstanceUID, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerRetrieveStudyData = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerRetrieveStudyData);\r\n\r\nexport default ConnectedViewerRetrieveStudyData;\r\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"sourceRoot":""}