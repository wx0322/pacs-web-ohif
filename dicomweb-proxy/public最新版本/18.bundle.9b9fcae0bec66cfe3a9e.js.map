{"version":3,"sources":["webpack:///D:/dev/dicomweb/Viewers/extensions/dicom-microscopy/src/DicomMicroscopyViewport.js"],"names":["DicomMicroscopyViewport","props","error","debouncedResize","container","React","createRef","debounce","viewer","resize","displaySet","dicomWebClient","searchInstanceOptions","studyInstanceUID","StudyInstanceUID","seriesInstanceUID","SeriesInstanceUID","searchForInstances","then","instances","promises","i","length","sopInstanceUID","retrieveInstanceOptions","promise","retrieveInstanceMetadata","metadata","push","Promise","all","filter","m","api","microscopyViewer","VLWholeSlideMicroscopyImageViewer","client","retrieveRendered","console","servicesManager","services","UINotificationService","LoggerService","message","show","autoClose","title","type","render","this","viewportData","installOpenLayersRenderer","current","style","width","height","className","ReactResizeDetector","handleWidth","handleHeight","onResize","onWindowResize","state","JSON","stringify","ref","Component"],"mappings":"2mCAIMA,E,YAOJ,WAAYC,GAAO,M,IAAA,O,4FAAA,S,EACjB,K,EAAA,eAAMA,GAAN,G,gDADiB,eANX,CACNC,MAAO,OAKU,gBAFV,MAEU,yBA4GF,WACf,EAAKC,qBA1GL,EAAKC,UAAYC,IAAMC,YAEvB,EAAKH,gBAAkBI,KAAS,WAC1B,EAAKC,QAAQ,EAAKA,OAAOC,WAC5B,KAPc,E,iTAYOL,EAAWM,GAAY,WACzCC,EAAiBD,EAAWC,eAE5BC,EAAwB,CAC5BC,iBAAkBH,EAAWI,iBAC7BC,kBAAmBL,EAAWM,mBAGhCL,EACGM,mBAAmBL,GACnBM,MAAK,SAAAC,GAEJ,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAAK,CACzC,IAAME,EAAiBJ,EAAUE,GAAG,YAAb,MAAkC,GAEnDG,EAA0B,CAC9BX,iBAAkBH,EAAWI,iBAC7BC,kBAAmBL,EAAWM,kBAC9BO,kBAGIE,EAAUd,EACbe,yBAAyBF,GACzBN,MAAK,SAAAS,GAEJ,GAAqB,WADHA,EAAS,GAAG,YAAZ,MACJ,GACZ,OAAOA,EAAS,MAGtBP,EAASQ,KAAKH,GAEhB,OAAOI,QAAQC,IAAIV,MAEpBF,KAzBH,e,EAAA,G,EAAA,yBAyBQ,WAAMS,GAAN,yGACJA,EAAWA,EAASI,QAAO,SAAAC,GAAC,OAAIA,KAD5B,SAGkB,oCAHlB,gBAGIC,EAHJ,EAGIA,IAGFC,EAAmBD,EAAIE,kCAE7B,IACE,EAAK3B,OAAS,IAAI0B,EAAiB,CACjCE,OAAQzB,EACRgB,WACAU,kBAAkB,IAEpB,MAAOnC,GACPoC,QAAQpC,MAAM,sCAAuCA,GADvC,EAKV,EAAKD,MAAMsC,gBAAgBC,SAF7BC,EAHY,EAGZA,sBACAC,EAJY,EAIZA,cAEED,IACIE,EACJ,qFACFD,EAAcxC,MAAM,CAAEA,QAAOyC,YAC7BF,EAAsBG,KAAK,CACzBC,WAAW,EACXC,MAAO,sBACPH,UACAI,KAAM,WAKZ,EAAKvC,OAAOwC,OAAO,CAAE5C,cAjCjB,0C,+KAzBR,yD,0CA8DkB,IACVM,EAAeuC,KAAKhD,MAAMiD,aAA1BxC,WAERuC,KAAKE,0BAA0BF,KAAK7C,UAAUgD,QAAS1C,K,+BAIvD,IAAM2C,EAAQ,CAAEC,MAAO,OAAQC,OAAQ,QACvC,OACE,yBAAKC,UAAW,wBAAyBH,MAAOA,GAC7CI,KACC,kBAAC,IAAD,CACEC,aAAW,EACXC,cAAY,EACZC,SAAUX,KAAKY,iBAGlBZ,KAAKa,MAAM5D,MACV,4BAAK6D,KAAKC,UAAUf,KAAKa,MAAM5D,QAE/B,yBAAKmD,MAAOA,EAAOY,IAAKhB,KAAK7C,kB,8BA7GD8D,aAwHvBlE","file":"18.bundle.9b9fcae0bec66cfe3a9e.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactResizeDetector from 'react-resize-detector';\r\nimport debounce from 'lodash.debounce';\r\n\r\nclass DicomMicroscopyViewport extends Component {\r\n  state = {\r\n    error: null,\r\n  };\r\n\r\n  viewer = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.container = React.createRef();\r\n\r\n    this.debouncedResize = debounce(() => {\r\n      if (this.viewer) this.viewer.resize();\r\n    }, 100);\r\n  }\r\n\r\n  // install the microscopy renderer into the web page.\r\n  // you should only do this once.\r\n  installOpenLayersRenderer(container, displaySet) {\r\n    const dicomWebClient = displaySet.dicomWebClient;\r\n\r\n    const searchInstanceOptions = {\r\n      studyInstanceUID: displaySet.StudyInstanceUID,\r\n      seriesInstanceUID: displaySet.SeriesInstanceUID,\r\n    };\r\n\r\n    dicomWebClient\r\n      .searchForInstances(searchInstanceOptions)\r\n      .then(instances => {\r\n        const promises = [];\r\n        for (let i = 0; i < instances.length; i++) {\r\n          const sopInstanceUID = instances[i]['00080018']['Value'][0];\r\n\r\n          const retrieveInstanceOptions = {\r\n            studyInstanceUID: displaySet.StudyInstanceUID,\r\n            seriesInstanceUID: displaySet.SeriesInstanceUID,\r\n            sopInstanceUID,\r\n          };\r\n\r\n          const promise = dicomWebClient\r\n            .retrieveInstanceMetadata(retrieveInstanceOptions)\r\n            .then(metadata => {\r\n              const ImageType = metadata[0]['00080008']['Value'];\r\n              if (ImageType[2] === 'VOLUME') {\r\n                return metadata[0];\r\n              }\r\n            });\r\n          promises.push(promise);\r\n        }\r\n        return Promise.all(promises);\r\n      })\r\n      .then(async metadata => {\r\n        metadata = metadata.filter(m => m);\r\n\r\n        const { api } = await import(\r\n          /* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer'\r\n        );\r\n        const microscopyViewer = api.VLWholeSlideMicroscopyImageViewer;\r\n\r\n        try {\r\n          this.viewer = new microscopyViewer({\r\n            client: dicomWebClient,\r\n            metadata,\r\n            retrieveRendered: false,\r\n          });\r\n        } catch (error) {\r\n          console.error('[Microscopy Viewer] Failed to load:', error);\r\n          const {\r\n            UINotificationService,\r\n            LoggerService,\r\n          } = this.props.servicesManager.services;\r\n          if (UINotificationService) {\r\n            const message =\r\n              'Failed to load viewport. Please check that you have hardware acceleration enabled.';\r\n            LoggerService.error({ error, message });\r\n            UINotificationService.show({\r\n              autoClose: false,\r\n              title: 'Microscopy Viewport',\r\n              message,\r\n              type: 'error',\r\n            });\r\n          }\r\n        }\r\n\r\n        this.viewer.render({ container });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { displaySet } = this.props.viewportData;\r\n\r\n    this.installOpenLayersRenderer(this.container.current, displaySet);\r\n  }\r\n\r\n  render() {\r\n    const style = { width: '100%', height: '100%' };\r\n    return (\r\n      <div className={'DicomMicroscopyViewer'} style={style}>\r\n        {ReactResizeDetector && (\r\n          <ReactResizeDetector\r\n            handleWidth\r\n            handleHeight\r\n            onResize={this.onWindowResize}\r\n          />\r\n        )}\r\n        {this.state.error ? (\r\n          <h2>{JSON.stringify(this.state.error)}</h2>\r\n        ) : (\r\n          <div style={style} ref={this.container} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.debouncedResize();\r\n  };\r\n}\r\n\r\nexport default DicomMicroscopyViewport;\r\n"],"sourceRoot":""}