{"version":3,"sources":["webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/utils/formatStudy.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/components/OHIFCornerstoneViewportOverlay.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/tools/constants/toolNames.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/tools/constants/scoordTypes.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/tools/DICOMSRDisplayTool.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/tools/initSRTools.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/tools/utils/getToolAlias.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/ConnectedCornerstoneViewport.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/tools/checkForSRAnnotations.js","webpack:///D:/dev/dicomweb/Viewers/extensions/cornerstone/src/OHIFCornerstoneViewport.js"],"names":["formatNumberPrecision","number","precision","parseFloat","toFixed","Button","styled","button","OHIFCornerstoneViewportOverlay","this","props","imageId","scale","windowWidth","windowCenter","inconsistencyWarnings","SRLabels","value","zoomPercentage","seriesMetadata","cornerstone","metaData","get","imagePlaneModule","rows","columns","sliceThickness","sliceLocation","seriesNumber","seriesDescription","generalStudyModule","studyDate","studyTime","studyDescription","patientModule","patientId","patientName","instanceNumber","frameRate","frameTime","compression","generalImageModule","lossyImageCompression","lossyImageCompressionRatio","lossyImageCompressionMethod","getCompression","wwwc","imageDimensions","imageIndex","stackSize","inconsistencyWarningsOn","length","getWarningContent","warningList","Array","isArray","listedWarnings","map","warn","index","key","Fragment","SRLabelsOn","normal","className","name","replace","trim","formatPN","date","strFormat","moment","format","formatDICOMDate","time","formatDICOMTime","placement","overlay","id","classNames","Icon","getWarningInfo","listedSRLabels","SRLabel","color","labels","visible","labelCodingSchemeDesignator","valueCodingSchemeDesignator","style","display","backgroundColor","disabled","label","getSRLabelsContent","getSRLabelsInfo","isNaN","PureComponent","PropTypes","isRequired","oneOfType","string","array","TOOL_NAMES","DICOM_SR_DISPLAY_TOOL","TEXT","POINT","MULTIPOINT","POLYLINE","CIRCLE","ELLIPSE","POLYGON","draw","importInternal","drawJoinedLines","drawCircle","drawEllipse","drawHandles","drawArrow","getNewContext","BaseTool","drawLinkedTextBox","DICOMSRDisplayTool","defaultProps","mixins","initialProps","Object","assign","_module","csTools","getModule","evt","eventData","detail","element","module","toolState","getToolState","trackingUniqueIdentifiersForElement","getters","activeIndex","trackingUniqueIdentifiers","activeTrackingUniqueIdentifier","filteredToolData","data","filter","td","includes","TrackingUniqueIdentifier","i","renderableData","toolColors","getActiveColor","getToolColor","options","lineWidth","handleRadius","keys","forEach","GraphicType","renderableDataForGraphicType","SCOORD_TYPES","renderPoint","renderMultipoint","renderPolyLine","renderCircle","renderEllipse","context","canvasContext","canvas","handles","textBox","active","hasMoved","movesIndependently","drawnIndependently","allowedOutsideImage","hasBoundingBox","anchorPoints","points","image","xOffset","yOffset","point","push","x","y","circle","center","radius","ellipse","corner1","corner2","halfWidth","Math","abs","halfHeight","_getTextBoxAnchorPointsForRenderableData","bottomRight","max","text","labelLength","min","lines","labelEntry","_labelToShorthand","_getTextBoxLinesFromLabels","textBoxAnchorPoints","handleStartCanvas","pixelToCanvas","handleEndCanvas","SHORT_HAND_MAP","AREA","Length","CORNERSTONEFREETEXT","shortHand","undefined","initSRTools","targetElement","toolAlias","toolName","getToolAlias","cornerstoneTools","addToolForElement","setToolEnabledForElement","LengthTool","configuration","renderDashed","ArrowAnnotateTool","BidirectionalTool","EllipticalRoiTool","RectangleRoiTool","FreehandRoiTool","setToolActiveForElement","pointers","mouseButtonMask","OHIF","redux","actions","setViewportActive","setViewportSpecificData","measurements","MeasurementHandlers","onAdded","onRemoved","onModified","MEASUREMENT_ACTION_MAP","added","removed","modified","throttle","event","ConnectedCornerstoneViewport","connect","state","ownProps","dataFromStore","extensions","viewportIndex","isActive","viewports","activeViewportIndex","viewportSpecificData","isPlaying","cine","cineFrameRate","isStackPrefetchEnabled","hasOwnProperty","stackPrefetch","enabled","dispatch","onElementEnabled","enabledElement","setEnabledElement","plugin","onMeasurementsChanged","action","CornerstoneViewport","studyMetadataManager","utils","checkForSRAnnotations","displaySet","srModule","getEnabledElement","StudyInstanceUID","studyMetadata","srDisplaySets","getDisplaySets","ds","Modality","_measurements","m","loaded","measurement","setters","activeTrackingUniqueIdentifierForElement","cs","updateImage","StackManager","OHIFCornerstoneViewport","viewportData","studies","displaySetInstanceUID","SOPInstanceUID","frameIndex","stack","getCornerstoneStack","console","log","clearStacks","Error","study","find","displaySets","set","storedStack","findOrCreateStack","currentImageIdIndex","imageIds","findIndex","sopClassUIDs","getViewportData","then","setState","setStateFromProps","prevProps","prevDisplaySet","childrenWithProps","children","child","React","cloneElement","imageIdIndex","onNewImageDebounced","sopInstanceUid","onNewImage","onNewImageDebounceTime","viewportOverlayComponent","filteredSRLabels","ReferencedSOPInstanceUID","customProps","Component","object","node","bool"],"mappings":"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","file":"15.bundle.c842d36f21207250e2a5.js","sourcesContent":["import moment from 'moment';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nfunction isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nfunction formatNumberPrecision(number, precision) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nfunction formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nfunction formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Formats a patient name for display purposes\r\n *\r\n * @param {string} name\r\n * @returns {string} formatted name.\r\n */\r\nfunction formatPN(name) {\r\n  if (!name) {\r\n    return;\r\n  }\r\n\r\n  // Convert the first ^ to a ', '. String.replace() only affects\r\n  // the first appearance of the character.\r\n  const commaBetweenFirstAndLast = name.replace('^', ', ');\r\n\r\n  // Replace any remaining '^' characters with spaces\r\n  const cleaned = commaBetweenFirstAndLast.replace(/\\^/g, ' ');\r\n\r\n  // Trim any extraneous whitespace\r\n  return cleaned.trim();\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} comrpession type.\r\n */\r\nfunction getCompression(imageId) {\r\n  const generalImageModule =\r\n    cornerstone.metaData.get('generalImageModule', imageId) || {};\r\n  const {\r\n    lossyImageCompression,\r\n    lossyImageCompressionRatio,\r\n    lossyImageCompressionMethod,\r\n  } = generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(\r\n      lossyImageCompressionRatio,\r\n      2\r\n    );\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n\r\nexport { isValidNumber,\r\n  formatNumberPrecision,\r\n  formatDICOMDate,\r\n  formatDICOMTime,\r\n  formatPN,\r\n  getCompression\r\n};\r\n","import { PureComponent } from 'react';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\nimport './OHIFCornerstoneViewportOverlay.css';\r\nimport {\r\n  isValidNumber,\r\n  formatNumberPrecision,\r\n  formatDICOMDate,\r\n  formatDICOMTime,\r\n  formatPN,\r\n  getCompression,\r\n} from '../utils/formatStudy';\r\nimport classNames from 'classnames';\r\nimport { Icon } from '@ohif/ui/src/elements/Icon';\r\nimport { Tooltip } from '@ohif/ui/src/components/tooltip';\r\nimport { OverlayTrigger } from '@ohif/ui/src/components/overlayTrigger';\r\n\r\nconst Button = styled.button`\r\n  color: white;\r\n  padding: 2px 7px;\r\n  border-radius: 10px;\r\n  outline: 0;\r\n  text-transform: none;\r\n  margin: 2px 2px;\r\n  cursor: pointer;\r\n  &:disabled {\r\n    cursor: default;\r\n    opacity: 0.9;\r\n  }\r\n`;\r\n\r\nclass OHIFCornerstoneViewportOverlay extends PureComponent {\r\n  static propTypes = {\r\n    scale: PropTypes.number.isRequired,\r\n    windowWidth: PropTypes.oneOfType([\r\n      PropTypes.number.isRequired,\r\n      PropTypes.string.isRequired,\r\n    ]),\r\n    windowCenter: PropTypes.oneOfType([\r\n      PropTypes.number.isRequired,\r\n      PropTypes.string.isRequired,\r\n    ]),\r\n    imageId: PropTypes.string.isRequired,\r\n    imageIndex: PropTypes.number.isRequired,\r\n    stackSize: PropTypes.number.isRequired,\r\n    inconsistencyWarnings: PropTypes.array,\r\n    SRLabels: PropTypes.array,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      imageId,\r\n      scale,\r\n      windowWidth,\r\n      windowCenter,\r\n      inconsistencyWarnings,\r\n      SRLabels,\r\n    } = this.props;\r\n\r\n    if (!imageId) {\r\n      return null;\r\n    }\r\n\r\n    const zoomPercentage = formatNumberPrecision(scale * 100, 0);\r\n    const seriesMetadata =\r\n      cornerstone.metaData.get('generalSeriesModule', imageId) || {};\r\n    const imagePlaneModule =\r\n      cornerstone.metaData.get('imagePlaneModule', imageId) || {};\r\n    const { rows, columns, sliceThickness, sliceLocation } = imagePlaneModule;\r\n    const { seriesNumber, seriesDescription } = seriesMetadata;\r\n\r\n    const generalStudyModule =\r\n      cornerstone.metaData.get('generalStudyModule', imageId) || {};\r\n    const { studyDate, studyTime, studyDescription } = generalStudyModule;\r\n\r\n    const patientModule =\r\n      cornerstone.metaData.get('patientModule', imageId) || {};\r\n    const { patientId, patientName } = patientModule;\r\n\r\n    const generalImageModule =\r\n      cornerstone.metaData.get('generalImageModule', imageId) || {};\r\n    const { instanceNumber } = generalImageModule;\r\n\r\n    const cineModule = cornerstone.metaData.get('cineModule', imageId) || {};\r\n    const { frameTime } = cineModule;\r\n\r\n    const frameRate = formatNumberPrecision(1000 / frameTime, 1);\r\n    const compression = getCompression(imageId);\r\n    const wwwc = `W: ${\r\n      windowWidth.toFixed ? windowWidth.toFixed(0) : windowWidth\r\n    } L: ${windowWidth.toFixed ? windowCenter.toFixed(0) : windowCenter}`;\r\n    const imageDimensions = `${columns} x ${rows}`;\r\n\r\n    const { imageIndex, stackSize } = this.props;\r\n\r\n    const inconsistencyWarningsOn =\r\n      inconsistencyWarnings && inconsistencyWarnings.length !== 0\r\n        ? true\r\n        : false;\r\n    const getWarningContent = warningList => {\r\n      if (Array.isArray(warningList)) {\r\n        const listedWarnings = warningList.map((warn, index) => {\r\n          return <li key={index}>{warn}</li>;\r\n        });\r\n\r\n        return <ol>{listedWarnings}</ol>;\r\n      } else {\r\n        return <React.Fragment>{warningList}</React.Fragment>;\r\n      }\r\n    };\r\n\r\n    const getWarningInfo = (seriesNumber, inconsistencyWarnings) => {\r\n      return (\r\n        <React.Fragment>\r\n          {inconsistencyWarnings.length != 0 ? (\r\n            <OverlayTrigger\r\n              key={seriesNumber}\r\n              placement=\"left\"\r\n              overlay={\r\n                <Tooltip\r\n                  placement=\"left\"\r\n                  className=\"in tooltip-warning\"\r\n                  id=\"tooltip-left\"\r\n                >\r\n                  <div className=\"warningTitle\">Series Inconsistencies</div>\r\n                  <div className=\"warningContent\">\r\n                    {getWarningContent(inconsistencyWarnings)}\r\n                  </div>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <div className={classNames('warning')}>\r\n                <span className=\"warning-icon\">\r\n                  <Icon name=\"exclamation-triangle\" />\r\n                </span>\r\n              </div>\r\n            </OverlayTrigger>\r\n          ) : (\r\n            <React.Fragment></React.Fragment>\r\n          )}\r\n        </React.Fragment>\r\n      );\r\n    };\r\n\r\n    const SRLabelsOn = SRLabels && SRLabels.length !== 0 ? true : false;\r\n\r\n    /**/\r\n\r\n    const getSRLabelsContent = SRLabels => {\r\n      if (Array.isArray(SRLabels)) {\r\n        const listedSRLabels = SRLabels.map((SRLabel, index) => {\r\n          const color = SRLabel.labels.color;\r\n          return (\r\n            SRLabel.labels.visible && (\r\n              <OverlayTrigger\r\n                key={index}\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip\r\n                    placement=\"top\"\r\n                    className=\"in tooltip-warning\"\r\n                    id=\"tooltip-top\"\r\n                  >\r\n                    <div className=\"warningTitle\">\r\n                      {' '}\r\n                      Coding scheme designators{' '}\r\n                    </div>\r\n                    <div className=\"warningContent\">\r\n                      {SRLabel.labels.labelCodingSchemeDesignator +\r\n                        ' : ' +\r\n                        SRLabel.labels.valueCodingSchemeDesignator}\r\n                    </div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <div style={{ display: 'inline-block' }}>\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: color,\r\n                    }}\r\n                    disabled={true}\r\n                    key={index}\r\n                  >\r\n                    {SRLabel.labels.label + ' : ' + SRLabel.labels.value}\r\n                  </Button>\r\n                </div>\r\n              </OverlayTrigger>\r\n            )\r\n          );\r\n        });\r\n\r\n        return <ol>{listedSRLabels}</ol>;\r\n      } else {\r\n        return <React.Fragment></React.Fragment>;\r\n      }\r\n    };\r\n\r\n    const getSRLabelsInfo = SRLabels => {\r\n      return (\r\n        <React.Fragment>\r\n          {SRLabels.length != 0 ? (\r\n            getSRLabelsContent(SRLabels)\r\n          ) : (\r\n            <React.Fragment></React.Fragment>\r\n          )}\r\n        </React.Fragment>\r\n      );\r\n    };\r\n\r\n    const normal = (\r\n      <React.Fragment>\r\n        <div className=\"top-left overlay-element\">\r\n          <div>{formatPN(patientName)}</div>\r\n          <div>{patientId}</div>\r\n        </div>\r\n        <div className=\"top-right overlay-element\">\r\n          <div>{studyDescription}</div>\r\n          <div>\r\n            {formatDICOMDate(studyDate)} {formatDICOMTime(studyTime)}\r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-right overlay-element\">\r\n          <div>Zoom: {zoomPercentage}%</div>\r\n          <div>{wwwc}</div>\r\n          <div className=\"compressionIndicator\">{compression}</div>\r\n        </div>\r\n        <div className=\"bottom-left2 warning\">\r\n          <div>\r\n            {inconsistencyWarningsOn\r\n              ? getWarningInfo(seriesNumber, inconsistencyWarnings)\r\n              : ''}\r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-left3 warning\">\r\n          <div>{SRLabelsOn ? getSRLabelsInfo(SRLabels) : ''}</div>\r\n        </div>\r\n        <div className=\"bottom-left overlay-element\">\r\n          <div>{seriesNumber >= 0 ? `Ser: ${seriesNumber}` : ''}</div>\r\n          <div>\r\n            {stackSize > 1\r\n              ? `Img: ${instanceNumber} ${imageIndex}/${stackSize}`\r\n              : ''}\r\n          </div>\r\n          <div>\r\n            {frameRate >= 0 ? `${formatNumberPrecision(frameRate, 2)} FPS` : ''}\r\n            <div>{imageDimensions}</div>\r\n            <div>\r\n              {isValidNumber(sliceLocation)\r\n                ? `Loc: ${formatNumberPrecision(sliceLocation, 2)} mm `\r\n                : ''}\r\n              {sliceThickness\r\n                ? `Thick: ${formatNumberPrecision(sliceThickness, 2)} mm`\r\n                : ''}\r\n            </div>\r\n            <div>{seriesDescription}</div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n\r\n    return <div className=\"OHIFCornerstoneViewportOverlay\">{normal}</div>;\r\n  }\r\n}\r\n\r\nexport default OHIFCornerstoneViewportOverlay;\r\n","const TOOL_NAMES = {\r\n  DICOM_SR_DISPLAY_TOOL: 'DICOMSRDisplayTool',\r\n};\r\n\r\nexport default TOOL_NAMES;\r\n","export default {\r\n  TEXT: 'TEXT',\r\n  POINT: 'POINT',\r\n  MULTIPOINT: 'MULTIPOINT',\r\n  POLYLINE: 'POLYLINE',\r\n  CIRCLE: 'CIRCLE',\r\n  ELLIPSE: 'ELLIPSE',\r\n  POLYGON: 'POLYGON',\r\n};\r\n","import csTools, {\r\n  importInternal,\r\n  getToolState,\r\n  toolColors,\r\n} from 'cornerstone-tools';\r\n\r\nimport cornerstone from 'cornerstone-core';\r\n\r\n/** Internal imports */\r\nimport TOOL_NAMES from './constants/toolNames';\r\nimport SCOORD_TYPES from './constants/scoordTypes';\r\nimport id from './id';\r\n\r\n/** Cornerstone 3rd party dev kit imports */\r\nconst draw = importInternal('drawing/draw');\r\nconst drawJoinedLines = importInternal('drawing/drawJoinedLines');\r\nconst drawCircle = importInternal('drawing/drawCircle');\r\nconst drawEllipse = importInternal('drawing/drawEllipse');\r\nconst drawHandles = importInternal('drawing/drawHandles');\r\nconst drawArrow = importInternal('drawing/drawArrow');\r\nconst getNewContext = importInternal('drawing/getNewContext');\r\nconst BaseTool = importInternal('base/BaseTool');\r\nconst drawLinkedTextBox = importInternal('drawing/drawLinkedTextBox');\r\n\r\n/**\r\n * @class DICOMSRDisplayTool - Renders DICOMSR data in a read only manner (i.e. as an overlay).\r\n *\r\n * This is a generic render tool.\r\n *\r\n * A single tool that, given some schema, can render\r\n * POINT, MULTIPOINT, POLYLINE, CIRCLE, and ELLIPSE\r\n * value types for a given imageId.\r\n *\r\n *\r\n * @extends cornerstoneTools.BaseTool\r\n */\r\nexport default class DICOMSRDisplayTool extends BaseTool {\r\n  constructor(props = {}) {\r\n    const defaultProps = {\r\n      mixins: ['enabledOrDisabledBinaryTool'],\r\n      name: TOOL_NAMES.DICOM_SR_DISPLAY_TOOL,\r\n    };\r\n\r\n    const initialProps = Object.assign(defaultProps, props);\r\n\r\n    super(initialProps);\r\n\r\n    this._module = csTools.getModule(id);\r\n  }\r\n\r\n  renderToolData(evt) {\r\n    const eventData = evt.detail;\r\n    const { element } = eventData;\r\n    const module = this._module;\r\n\r\n    const toolState = getToolState(element, this.name);\r\n\r\n    if (!toolState) {\r\n      return;\r\n    }\r\n\r\n    const trackingUniqueIdentifiersForElement = module.getters.trackingUniqueIdentifiersForElement(\r\n      element\r\n    );\r\n\r\n    const {\r\n      activeIndex,\r\n      trackingUniqueIdentifiers,\r\n    } = trackingUniqueIdentifiersForElement;\r\n\r\n    const activeTrackingUniqueIdentifier =\r\n      trackingUniqueIdentifiers[activeIndex];\r\n\r\n    // Filter toolData to only render the data for the active SR.\r\n    const filteredToolData = toolState.data.filter(td =>\r\n      trackingUniqueIdentifiers.includes(td.TrackingUniqueIdentifier)\r\n    );\r\n\r\n    let shouldRepositionTextBoxes = false;\r\n\r\n    for (let i = 0; i < filteredToolData.length; i++) {\r\n      const data = filteredToolData[i];\r\n      const { renderableData, labels } = data;\r\n\r\n      const color =\r\n        data.TrackingUniqueIdentifier === activeTrackingUniqueIdentifier\r\n          ? toolColors.getActiveColor()\r\n          : toolColors.getToolColor();\r\n      const lineWidth = 2;\r\n      const options = {\r\n        color,\r\n        lineWidth,\r\n        handleRadius: 6,\r\n      };\r\n\r\n      Object.keys(renderableData).forEach(GraphicType => {\r\n        const renderableDataForGraphicType = renderableData[GraphicType];\r\n\r\n        switch (GraphicType) {\r\n          case SCOORD_TYPES.TEXT:\r\n            break;\r\n          case SCOORD_TYPES.POINT:\r\n            this.renderPoint(renderableDataForGraphicType, eventData, options);\r\n            break;\r\n          case SCOORD_TYPES.MULTIPOINT:\r\n            this.renderMultipoint(\r\n              renderableDataForGraphicType,\r\n              eventData,\r\n              options\r\n            );\r\n            break;\r\n          case SCOORD_TYPES.POLYGON:\r\n          case SCOORD_TYPES.POLYLINE:\r\n            this.renderPolyLine(\r\n              renderableDataForGraphicType,\r\n              eventData,\r\n              options\r\n            );\r\n            break;\r\n          case SCOORD_TYPES.CIRCLE:\r\n            this.renderCircle(renderableDataForGraphicType, eventData, options);\r\n            break;\r\n          case SCOORD_TYPES.ELLIPSE:\r\n            this.renderEllipse(\r\n              renderableDataForGraphicType,\r\n              eventData,\r\n              options\r\n            );\r\n            break;\r\n        }\r\n      });\r\n\r\n      const { element } = eventData;\r\n      const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n      if (!data.handles || !data.handles.textBox) {\r\n        const textBox = {\r\n          active: false,\r\n          hasMoved: true,\r\n          movesIndependently: false,\r\n          drawnIndependently: true,\r\n          allowedOutsideImage: true,\r\n          hasBoundingBox: true,\r\n        };\r\n\r\n        const anchorPoints = _getTextBoxAnchorPointsForRenderableData(\r\n          renderableData,\r\n          eventData\r\n        );\r\n        textBox.anchorPoints = anchorPoints;\r\n\r\n        const bottomRight = {\r\n          x: Math.max(...anchorPoints.map(point => point.x)),\r\n          y: Math.max(...anchorPoints.map(point => point.y)),\r\n        };\r\n\r\n        textBox.x = bottomRight.x;\r\n        textBox.y = bottomRight.y;\r\n\r\n        data.handles = {};\r\n        data.handles.textBox = textBox;\r\n\r\n        shouldRepositionTextBoxes = true;\r\n      }\r\n\r\n      const text = _getTextBoxLinesFromLabels(labels);\r\n\r\n      function textBoxAnchorPoints() {\r\n        return data.handles.textBox.anchorPoints;\r\n      }\r\n\r\n      if (data.handles.textBox.anchorPoints.length !== 0) {\r\n        draw(context, context => {\r\n          drawLinkedTextBox(\r\n            context,\r\n            element,\r\n            data.handles.textBox,\r\n            text,\r\n            data.handles,\r\n            textBoxAnchorPoints,\r\n            color,\r\n            lineWidth,\r\n            0,\r\n            true\r\n          );\r\n        });\r\n      }\r\n    }\r\n\r\n    // TOOD -> text boxes may overlap with other annotations at the moment.\r\n    // To be fixed after we get requirements.\r\n    // if (shouldRepositionTextBoxes) {\r\n    //   this.repositionTextBox(filteredToolData, eventData);\r\n    // }\r\n  }\r\n\r\n  // repositionTextBox(toolData, eventData) {\r\n  //   const toolBoundingBoxes = [];\r\n\r\n  //   for (let i = 0; i < toolData.length; i++) {\r\n  //     const toolDataI = toolData[i];\r\n\r\n  //     const { textBox } = toolDataI.handles;\r\n  //     const { anchorPoints } = textBox;\r\n\r\n  //     const boundingBox = _getBoundingBoxFromAnchorPoints(anchorPoints);\r\n  //     // Get the textbox bounding locations.\r\n  //     // Get the tool extents.\r\n  //   }\r\n  // }\r\n\r\n  renderPolyLine(renderableData, eventData, options) {\r\n    const { element } = eventData;\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n    renderableData.forEach(points => {\r\n      draw(context, context => {\r\n        drawJoinedLines(context, element, points[0], points, options);\r\n      });\r\n    });\r\n  }\r\n\r\n  renderMultipoint(renderableData, eventData, options) {\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(points => {\r\n      draw(context, context => {\r\n        drawHandles(context, eventData, points, options);\r\n      });\r\n    });\r\n  }\r\n\r\n  renderPoint(renderableData, eventData, options) {\r\n    // Render single point as an arrow.\r\n    const { element, image } = eventData;\r\n    const { rows, columns } = image;\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n    const { color, lineWidth } = options;\r\n\r\n    // Find a suitable length for the image size.\r\n\r\n    const xOffset = columns / 10;\r\n    const yOffset = rows / 10;\r\n\r\n    renderableData.forEach(points => {\r\n      const point = points[0]; // The SCOORD type is POINT so the array length is 1.\r\n      draw(context, context => {\r\n        // Draw the arrow\r\n        const handleStartCanvas = cornerstone.pixelToCanvas(element, point);\r\n        const handleEndCanvas = cornerstone.pixelToCanvas(element, {\r\n          x: point.x + xOffset,\r\n          y: point.y + yOffset,\r\n        });\r\n\r\n        drawArrow(\r\n          context,\r\n          handleEndCanvas,\r\n          handleStartCanvas,\r\n          color,\r\n          lineWidth,\r\n          false\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  renderCircle(renderableData, eventData, options) {\r\n    const { element } = eventData;\r\n\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(circle => {\r\n      const { center, radius } = circle;\r\n\r\n      drawCircle(context, element, center, radius, options);\r\n    });\r\n  }\r\n\r\n  renderEllipse(renderableData, eventData, options) {\r\n    const { element } = eventData;\r\n\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(ellipse => {\r\n      const { corner1, corner2 } = ellipse;\r\n\r\n      drawEllipse(\r\n        context,\r\n        element,\r\n        corner1,\r\n        corner2,\r\n        options,\r\n        'pixel',\r\n        0 // TODO -> Work our the initial rotation and add it here so we render appropriately rotated ellipses.\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nfunction _getTextBoxLinesFromLabels(labels) {\r\n  // TODO -> max 3 for now (label + shortAxis + longAxis), need a generic solution for this!\r\n\r\n  const labelLength = Math.min(labels.length, 3);\r\n  const lines = [];\r\n\r\n  for (let i = 0; i < labelLength; i++) {\r\n    const labelEntry = labels[i];\r\n    lines.push(`${_labelToShorthand(labelEntry.label)}${labelEntry.value}`);\r\n  }\r\n\r\n  return lines;\r\n}\r\n\r\nconst SHORT_HAND_MAP = {\r\n  'Short Axis': 'W ',\r\n  'Long Axis': 'L ',\r\n  AREA: 'Area ',\r\n  Length: '',\r\n  CORNERSTONEFREETEXT: '',\r\n};\r\n\r\nfunction _labelToShorthand(label) {\r\n  const shortHand = SHORT_HAND_MAP[label];\r\n\r\n  if (shortHand !== undefined) {\r\n    return shortHand;\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\nfunction _getTextBoxAnchorPointsForRenderableData(renderableData, eventData) {\r\n  let anchorPoints = [];\r\n\r\n  Object.keys(renderableData).forEach(GraphicType => {\r\n    const renderableDataForGraphicType = renderableData[GraphicType];\r\n\r\n    switch (GraphicType) {\r\n      case SCOORD_TYPES.TEXT:\r\n        break;\r\n      case SCOORD_TYPES.POINT:\r\n        renderableDataForGraphicType.forEach(points => {\r\n          anchorPoints = [...anchorPoints, ...points];\r\n\r\n          // Add other arrow point based on image size.\r\n          const { image } = eventData;\r\n          const { rows, columns } = image;\r\n\r\n          const xOffset = columns / 10;\r\n          const yOffset = rows / 10;\r\n          const point = points[0];\r\n\r\n          anchorPoints.push({ x: point.x + xOffset, y: point.y + yOffset });\r\n        });\r\n\r\n        break;\r\n      case SCOORD_TYPES.MULTIPOINT:\r\n      case SCOORD_TYPES.POLYLINE:\r\n      case SCOORD_TYPES.POLYGON:\r\n        renderableDataForGraphicType.forEach(points => {\r\n          anchorPoints = [...anchorPoints, ...points];\r\n        });\r\n        break;\r\n      case SCOORD_TYPES.CIRCLE:\r\n        renderableDataForGraphicType.forEach(circle => {\r\n          const { center, radius } = circle;\r\n\r\n          anchorPoints.push({ x: center.x + radius, y: center.y });\r\n          anchorPoints.push({ x: center.x - radius, y: center.y });\r\n          anchorPoints.push({ x: center.x, y: center.y + radius });\r\n          anchorPoints.push({ x: center.x, y: center.y - radius });\r\n        });\r\n\r\n        break;\r\n      case SCOORD_TYPES.ELLIPSE:\r\n        renderableDataForGraphicType.forEach(ellipse => {\r\n          const { corner1, corner2 } = ellipse;\r\n\r\n          const halfWidth = Math.abs(corner1.x - corner2.x) / 2;\r\n          const halfHeight = Math.abs(corner1.y - corner2.y) / 2;\r\n\r\n          const center = {\r\n            x: (corner1.x + corner2.x) / 2,\r\n            y: (corner1.y + corner2.y) / 2,\r\n          };\r\n\r\n          anchorPoints.push({ x: center.x + halfWidth, y: center.y });\r\n          anchorPoints.push({ x: center.x - halfWidth, y: center.y });\r\n          anchorPoints.push({ x: center.x, y: center.y + halfHeight });\r\n          anchorPoints.push({ x: center.x, y: center.y - halfHeight });\r\n        });\r\n        break;\r\n    }\r\n  });\r\n\r\n  return anchorPoints;\r\n}\r\n\r\nfunction _getBoundingBoxFromAnchorPoints(anchorPoints) {\r\n  let minX = Infinity;\r\n  let maxX = -Infinity;\r\n  let minY = Infinity;\r\n  let maxY = -Infinity;\r\n\r\n  anchorPoints.forEach(point => {\r\n    const { x, y } = point;\r\n\r\n    if (x > maxX) {\r\n      maxX = x;\r\n    } else if (x < minX) {\r\n      minX = x;\r\n    }\r\n\r\n    if (y > maxY) {\r\n      maxY = y;\r\n    } else if (y < minY) {\r\n      minY = y;\r\n    }\r\n  });\r\n}\r\n","import cornerstoneTools from 'cornerstone-tools';\r\nimport DICOMSRDisplayTool from './DICOMSRDisplayTool';\r\nimport TOOL_NAMES from './constants/toolNames';\r\nimport getToolAlias from './utils/getToolAlias';\r\n\r\n/**\r\n * Initialize SR cornerstone tools.\r\n *\r\n * @param {*} targetElement\r\n */\r\nconst initSRTools = targetElement => {\r\n  const primaryToolId = 'Wwwc';\r\n  const toolAlias = getToolAlias(primaryToolId); // These are 1:1 for built-in only\r\n\r\n  // ~~ MAGIC\r\n  cornerstoneTools.addToolForElement(targetElement, DICOMSRDisplayTool);\r\n  cornerstoneTools.setToolEnabledForElement(\r\n    targetElement,\r\n    TOOL_NAMES.DICOM_SR_DISPLAY_TOOL\r\n  );\r\n\r\n  // ~~ Variants\r\n  cornerstoneTools.addToolForElement(\r\n    targetElement,\r\n    cornerstoneTools.LengthTool,\r\n    {\r\n      name: 'SRLength',\r\n      configuration: {\r\n        renderDashed: true,\r\n      },\r\n    }\r\n  );\r\n  cornerstoneTools.addToolForElement(\r\n    targetElement,\r\n    cornerstoneTools.ArrowAnnotateTool,\r\n    {\r\n      name: 'SRArrowAnnotate',\r\n      configuration: {\r\n        renderDashed: true,\r\n      },\r\n    }\r\n  );\r\n  cornerstoneTools.addToolForElement(\r\n    targetElement,\r\n    cornerstoneTools.BidirectionalTool,\r\n    {\r\n      name: 'SRBidirectional',\r\n      configuration: {\r\n        renderDashed: true,\r\n      },\r\n    }\r\n  );\r\n  cornerstoneTools.addToolForElement(\r\n    targetElement,\r\n    cornerstoneTools.EllipticalRoiTool,\r\n    {\r\n      name: 'SREllipticalRoi',\r\n      configuration: {\r\n        renderDashed: true,\r\n      },\r\n    }\r\n  );\r\n  cornerstoneTools.addToolForElement(\r\n    targetElement,\r\n    cornerstoneTools.RectangleRoiTool,\r\n    {\r\n      name: 'SRRectangleRoi',\r\n      configuration: {\r\n        renderDashed: true,\r\n      },\r\n    }\r\n  );\r\n  cornerstoneTools.addToolForElement(\r\n    targetElement,\r\n    cornerstoneTools.FreehandRoiTool,\r\n    {\r\n      name: 'SRFreehandRoi',\r\n      configuration: {\r\n        renderDashed: true,\r\n      },\r\n    }\r\n  );\r\n\r\n  // ~~ Business as usual\r\n  cornerstoneTools.setToolActiveForElement(targetElement, 'PanMultiTouch', {\r\n    pointers: 2,\r\n  });\r\n  cornerstoneTools.setToolActiveForElement(targetElement, 'ZoomTouchPinch', {});\r\n\r\n  // TODO: Add always dashed tool alternative aliases\r\n  // TODO: or same name... alternative config?\r\n  cornerstoneTools.setToolActiveForElement(targetElement, toolAlias, {\r\n    mouseButtonMask: 1,\r\n  });\r\n  cornerstoneTools.setToolActiveForElement(targetElement, 'Pan', {\r\n    mouseButtonMask: 4,\r\n  });\r\n  cornerstoneTools.setToolActiveForElement(targetElement, 'Zoom', {\r\n    mouseButtonMask: 2,\r\n  });\r\n  cornerstoneTools.setToolActiveForElement(\r\n    targetElement,\r\n    'StackScrollMouseWheel',\r\n    {}\r\n  );\r\n};\r\n\r\nexport default initSRTools;\r\n","/**\r\n * Get cornerstone tool alias.\r\n *\r\n * @param {string} toolName\r\n * @returns tool alias\r\n */\r\nexport default function getToolAlias(toolName) {\r\n  let toolAlias = toolName;\r\n\r\n  switch (toolName) {\r\n    case 'Length':\r\n      toolAlias = 'SRLength';\r\n      break;\r\n    case 'Bidirectional':\r\n      toolAlias = 'SRBidirectional';\r\n      break;\r\n    case 'ArrowAnnotate':\r\n      toolAlias = 'SRArrowAnnotate';\r\n      break;\r\n    case 'EllipticalRoi':\r\n      toolAlias = 'SREllipticalRoi';\r\n      break;\r\n    case 'FreehandRoi':\r\n      toolAlias = 'SRFreehandRoi';\r\n      break;\r\n    case 'RectangleRoi':\r\n      toolAlias = 'SRRectangleRoi';\r\n      break;\r\n  }\r\n\r\n  return toolAlias;\r\n}\r\n","import CornerstoneViewport from 'react-cornerstone-viewport';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport throttle from 'lodash.throttle';\r\nimport { setEnabledElement } from './state';\r\nimport initSRTools from './tools/initSRTools';\r\n\r\nconst { setViewportActive, setViewportSpecificData } = OHIF.redux.actions;\r\nconst {\r\n  onAdded,\r\n  onRemoved,\r\n  onModified,\r\n} = OHIF.measurements.MeasurementHandlers;\r\n\r\n// TODO: Transition to enums for the action names so that we can ensure they stay up to date\r\n// everywhere they're used.\r\nconst MEASUREMENT_ACTION_MAP = {\r\n  added: onAdded,\r\n  removed: onRemoved,\r\n  modified: throttle(event => {\r\n    return onModified(event);\r\n  }, 300),\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let dataFromStore;\r\n\r\n  // TODO: This may not be updated anymore :thinking:\r\n  if (state.extensions && state.extensions.cornerstone) {\r\n    dataFromStore = state.extensions.cornerstone;\r\n  }\r\n\r\n  // If this is the active viewport, enable prefetching.\r\n  const { viewportIndex } = ownProps; //.viewportData;\r\n  const isActive = viewportIndex === state.viewports.activeViewportIndex;\r\n  const viewportSpecificData =\r\n    state.viewports.viewportSpecificData[viewportIndex] || {};\r\n\r\n  // CINE\r\n  let isPlaying = false;\r\n  let frameRate = 24;\r\n\r\n  if (viewportSpecificData && viewportSpecificData.cine) {\r\n    const cine = viewportSpecificData.cine;\r\n\r\n    isPlaying = cine.isPlaying === true;\r\n    frameRate = cine.cineFrameRate || frameRate;\r\n  }\r\n\r\n  return {\r\n    // layout: state.viewports.layout,\r\n    isActive,\r\n    // TODO: Need a cleaner and more versatile way.\r\n    // Currently justing using escape hatch + commands\r\n    // activeTool: activeButton && activeButton.command,\r\n    ...dataFromStore,\r\n    isStackPrefetchEnabled: ownProps.hasOwnProperty('isStackPrefetchEnabled')\r\n      ? ownProps.isStackPrefetchEnabled\r\n      : ownProps.stackPrefetch\r\n      ? ownProps.stackPrefetch.enabled\r\n      : isActive,\r\n    isPlaying,\r\n    frameRate,\r\n    //stack: viewportSpecificData.stack,\r\n    // viewport: viewportSpecificData.viewport,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  const { viewportIndex } = ownProps;\r\n\r\n  return {\r\n    setViewportActive: () => {\r\n      dispatch(setViewportActive(viewportIndex));\r\n    },\r\n\r\n    setViewportSpecificData: data => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n\r\n    /**\r\n     * Our component \"enables\" the underlying dom element on \"componentDidMount\"\r\n     * It listens for that event, and then emits the enabledElement. We can grab\r\n     * a reference to it here, to make playing with cornerstone's native methods\r\n     * easier.\r\n     */\r\n    onElementEnabled: event => {\r\n      const enabledElement = event.detail.element;\r\n      setEnabledElement(viewportIndex, enabledElement);\r\n      dispatch(\r\n        setViewportSpecificData(viewportIndex, {\r\n          // TODO: Hack to make sure our plugin info is available from the outset\r\n          plugin: 'cornerstone',\r\n        })\r\n      );\r\n      initSRTools(enabledElement);\r\n    },\r\n\r\n    onMeasurementsChanged: (event, action) => {\r\n      return MEASUREMENT_ACTION_MAP[action](event);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCornerstoneViewport = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CornerstoneViewport);\r\n\r\nexport default ConnectedCornerstoneViewport;\r\n","import csTools from 'cornerstone-tools';\r\nimport cs from 'cornerstone-core';\r\nimport OHIF from '@ohif/core';\r\n\r\nimport { getEnabledElement } from '../state';\r\nimport id from './id';\r\n\r\nconst { studyMetadataManager } = OHIF.utils;\r\n\r\nconst checkForSRAnnotations = ({ viewportIndex, displaySet }) => {\r\n  const srModule = csTools.getModule(id);\r\n\r\n  const element = getEnabledElement(viewportIndex);\r\n  if (!element) {\r\n    return;\r\n  }\r\n\r\n  const { StudyInstanceUID } = displaySet;\r\n  const studyMetadata = studyMetadataManager.get(StudyInstanceUID);\r\n  if (!studyMetadata) {\r\n    return;\r\n  }\r\n\r\n  const srDisplaySets = studyMetadata\r\n    .getDisplaySets()\r\n    .filter(ds => ds.Modality === 'SR');\r\n  if (srDisplaySets.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const { measurements: _measurements } = srDisplaySets[0];\r\n  if (!_measurements || _measurements.length < 1) {\r\n    return;\r\n  }\r\n\r\n  const measurements = _measurements.filter(m => m.loaded === true);\r\n  const measurement = measurements[0];\r\n  if (!measurement) {\r\n    return;\r\n  }\r\n\r\n  srModule.setters.trackingUniqueIdentifiersForElement(\r\n    element,\r\n    measurements.map(measurement => measurement.TrackingUniqueIdentifier),\r\n    measurement\r\n  );\r\n\r\n  const { TrackingUniqueIdentifier } = measurement;\r\n  srModule.setters.activeTrackingUniqueIdentifierForElement(\r\n    element,\r\n    TrackingUniqueIdentifier\r\n  );\r\n\r\n  cs.updateImage(element);\r\n};\r\n\r\nexport default checkForSRAnnotations;\r\n","import React, { Component } from 'react';\r\n\r\nimport OHIFCornerstoneViewportOverlay from './components/OHIFCornerstoneViewportOverlay';\r\nimport ConnectedCornerstoneViewport from './ConnectedCornerstoneViewport';\r\nimport OHIF from '@ohif/core';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\nimport checkForSRAnnotations from './tools/checkForSRAnnotations';\r\n\r\nconst { StackManager } = OHIF.utils;\r\n\r\nclass OHIFCornerstoneViewport extends Component {\r\n  state = {\r\n    viewportData: null,\r\n  };\r\n\r\n  static defaultProps = {\r\n    customProps: {},\r\n    isStackPrefetchEnabled: true,\r\n  };\r\n\r\n  static propTypes = {\r\n    studies: PropTypes.object,\r\n    displaySet: PropTypes.object,\r\n    viewportIndex: PropTypes.number,\r\n    children: PropTypes.node,\r\n    customProps: PropTypes.object,\r\n    stackPrefetch: PropTypes.object,\r\n    isStackPrefetchEnabled: PropTypes.bool,\r\n  };\r\n\r\n  static id = 'OHIFCornerstoneViewport';\r\n\r\n  static init() {\r\n    console.log('OHIFCornerstoneViewport init()');\r\n  }\r\n\r\n  static destroy() {\r\n    console.log('OHIFCornerstoneViewport destroy()');\r\n    StackManager.clearStacks();\r\n  }\r\n\r\n  /**\r\n   * Obtain the CornerstoneTools Stack for the specified display set.\r\n   *\r\n   * @param {Object[]} studies\r\n   * @param {String} StudyInstanceUID\r\n   * @param {String} displaySetInstanceUID\r\n   * @param {String} [SOPInstanceUID]\r\n   * @param {Number} [frameIndex=1]\r\n   * @return {Object} CornerstoneTools Stack\r\n   */\r\n  static getCornerstoneStack(\r\n    studies,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n    SOPInstanceUID,\r\n    frameIndex = 0\r\n  ) {\r\n    if (!studies || !studies.length) {\r\n      throw new Error('Studies not provided.');\r\n    }\r\n\r\n    if (!StudyInstanceUID) {\r\n      throw new Error('StudyInstanceUID not provided.');\r\n    }\r\n\r\n    if (!displaySetInstanceUID) {\r\n      throw new Error('StudyInstanceUID not provided.');\r\n    }\r\n\r\n    // Create shortcut to displaySet\r\n    const study = studies.find(\r\n      study => study.StudyInstanceUID === StudyInstanceUID\r\n    );\r\n\r\n    if (!study) {\r\n      throw new Error('Study not found.');\r\n    }\r\n\r\n    const displaySet = study.displaySets.find(set => {\r\n      return set.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n\r\n    if (!displaySet) {\r\n      throw new Error('Display Set not found.');\r\n    }\r\n\r\n    // Get stack from Stack Manager\r\n    const storedStack = StackManager.findOrCreateStack(study, displaySet);\r\n\r\n    // Clone the stack here so we don't mutate it\r\n    const stack = Object.assign({}, storedStack);\r\n    stack.currentImageIdIndex = frameIndex;\r\n\r\n    if (SOPInstanceUID) {\r\n      const index = stack.imageIds.findIndex(imageId => {\r\n        const imageIdSOPInstanceUID = cornerstone.metaData.get(\r\n          'SOPInstanceUID',\r\n          imageId\r\n        );\r\n\r\n        return imageIdSOPInstanceUID === SOPInstanceUID;\r\n      });\r\n\r\n      if (index > -1) {\r\n        stack.currentImageIdIndex = index;\r\n      } else {\r\n        console.warn(\r\n          'SOPInstanceUID provided was not found in specified DisplaySet'\r\n        );\r\n      }\r\n    }\r\n\r\n    return stack;\r\n  }\r\n\r\n  getViewportData = async (\r\n    studies,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n    SOPInstanceUID,\r\n    frameIndex\r\n  ) => {\r\n    let viewportData;\r\n\r\n    const stack = OHIFCornerstoneViewport.getCornerstoneStack(\r\n      studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      SOPInstanceUID,\r\n      frameIndex\r\n    );\r\n\r\n    viewportData = {\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      stack,\r\n    };\r\n\r\n    return viewportData;\r\n  };\r\n\r\n  setStateFromProps() {\r\n    const { studies, displaySet } = this.props.viewportData;\r\n    const {\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      sopClassUIDs,\r\n      SOPInstanceUID,\r\n      frameIndex,\r\n    } = displaySet;\r\n\r\n    if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n      return;\r\n    }\r\n\r\n    if (sopClassUIDs && sopClassUIDs.length > 1) {\r\n      console.warn(\r\n        'More than one SOPClassUID in the same series is not yet supported.'\r\n      );\r\n    }\r\n\r\n    this.getViewportData(\r\n      studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      SOPInstanceUID,\r\n      frameIndex\r\n    ).then(viewportData => {\r\n      this.setState({\r\n        viewportData,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setStateFromProps();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { displaySet } = this.props.viewportData;\r\n    const prevDisplaySet = prevProps.viewportData.displaySet;\r\n\r\n    if (\r\n      displaySet.displaySetInstanceUID !==\r\n        prevDisplaySet.displaySetInstanceUID ||\r\n      displaySet.SOPInstanceUID !== prevDisplaySet.SOPInstanceUID ||\r\n      displaySet.frameIndex !== prevDisplaySet.frameIndex\r\n    ) {\r\n      const { viewportIndex } = this.props;\r\n      checkForSRAnnotations({ displaySet, viewportIndex });\r\n      this.setStateFromProps();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let childrenWithProps = null;\r\n\r\n    if (!this.state.viewportData) {\r\n      return null;\r\n    }\r\n    const { viewportIndex } = this.props;\r\n    const { inconsistencyWarnings } = this.props.viewportData.displaySet;\r\n    const {\r\n      imageIds,\r\n      currentImageIdIndex,\r\n      // If this comes from the instance, would be a better default\r\n      // `FrameTime` in the instance\r\n      // frameRate = 0,\r\n    } = this.state.viewportData.stack;\r\n\r\n    // TODO: Does it make more sense to use Context?\r\n    if (this.props.children && this.props.children.length) {\r\n      childrenWithProps = this.props.children.map((child, index) => {\r\n        return (\r\n          child &&\r\n          React.cloneElement(child, {\r\n            viewportIndex: this.props.viewportIndex,\r\n            key: index,\r\n          })\r\n        );\r\n      });\r\n    }\r\n\r\n    const newImageHandler = ({ currentImageIdIndex, sopInstanceUid }) => {\r\n      const { displaySet } = this.props.viewportData;\r\n      const { StudyInstanceUID } = displaySet;\r\n\r\n      if (currentImageIdIndex >= 0) {\r\n        this.props.onNewImage({\r\n          StudyInstanceUID,\r\n          SOPInstanceUID: sopInstanceUid,\r\n          frameIndex: currentImageIdIndex,\r\n          activeViewportIndex: viewportIndex,\r\n        });\r\n      }\r\n    };\r\n\r\n    const overlay = props => {\r\n      const displaySet = this.props.viewportData.displaySet;\r\n      let filteredSRLabels;\r\n      if (displaySet.SRLabels && displaySet.SRLabels.length !== 0) {\r\n        filteredSRLabels = displaySet.SRLabels.filter(\r\n          SRLabel =>\r\n            SRLabel.ReferencedSOPInstanceUID === displaySet.SOPInstanceUID\r\n        );\r\n      }\r\n\r\n      return (\r\n        <OHIFCornerstoneViewportOverlay\r\n          {...props}\r\n          inconsistencyWarnings={inconsistencyWarnings}\r\n          SRLabels={filteredSRLabels}\r\n        />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <ConnectedCornerstoneViewport\r\n          viewportIndex={viewportIndex}\r\n          imageIds={imageIds}\r\n          imageIdIndex={currentImageIdIndex}\r\n          onNewImageDebounced={newImageHandler}\r\n          onNewImageDebounceTime={300}\r\n          viewportOverlayComponent={overlay}\r\n          stackPrefetch={this.props.stackPrefetch}\r\n          isStackPrefetchEnabled={this.props.isStackPrefetchEnabled}\r\n          // ~~ Connected (From REDUX)\r\n          // frameRate={frameRate}\r\n          // isPlaying={false}\r\n          // onElementEnabled={() => {}}\r\n          // setViewportActive{() => {}}\r\n          {...this.props.customProps}\r\n        />\r\n        {childrenWithProps}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OHIFCornerstoneViewport;\r\n"],"sourceRoot":""}