{"version":3,"sources":["webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./components/StudyPrefetcher.js","webpack:///./components/StudyLoadingMonitor.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js"],"names":["scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","activeViewport","menuOptionEntry","value","target","icon","bottomLabel","label","badgeNumber","stateEvent","unshift","t","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","onThumbnailClick","displaySetInstanceUID","displaySet","studyMetadata","isArray","reduce","all","current","currentDisplaySet","displaySets","concat","ds","findDisplaySetByUID","servicesManager","services","LoggerService","UINotificationService","isDerived","Modality","getSourceDisplaySet","error","message","show","autoClose","referencedDisplaySet","activatedLabelmapPromise","then","activatedLabelmapIndex","selectionFired","CustomEvent","detail","segThumbnailSelected","dispatchEvent","Error","isSOPClassUIDSupported","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","StudyInstanceUID","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","utils","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","useEffect","ViewportPanes","React","useMemo","pluginName","ViewportComponent","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","study","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","isOpen","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","UIModalService","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","StudyPrefetcher","studyPrefetcher","classes","getInstance","studiesMetadata","studyMetadataManager","get","setStudies","onNewImage","addDisplaySet","getStudy","image","getSeries","instance","getDisplaySetBySOPInstanceUID","prefetch","element","onElementEnabled","cs","EVENTS","NEW_IMAGE","events","ELEMENT_ENABLED","destroy","shape","enabled","order","displaySetCount","preventCache","prefetchDisplaySetsTimeout","includeActiveDisplaySet","StudyLoadingListener","StudyLoadingMonitor","studyLoadingListener","clear","addStudies","Viewer","thumbnails","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","external","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","_updateThumbnails","timepointApi","measurementApi","currentTimepointId","activeDisplaySetInstanceUID","undefined","_mapStudiesToThumbnails","prevActiveDisplaySetInstanceUID","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","linkPath","createLogoComponentFn","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","showThumbnailProgressBar","displayProgress","getActiveViewport","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","_checkForDerivedDisplaySets","derivedDisplaySetsNumber","derivedDisplaySets","getDerivedDatasets","referencedSeriesInstanceUID","SeriesInstanceUID","_checkForSeriesInconsistencesWarnings","inconsistencyWarnings","reconstructionIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","loadError","segLoadErrorMessagge","_isDisplaySetActive","imageId","altImageText","imageIndex","Math","floor","SOPClassUIDNaturalized","hasWarnings","hasDerivedDisplaySets","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer"],"mappings":"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","file":"ConnectedStandaloneRouting~IHEInvokeImageDisplay~ViewerLocalFileData~ViewerRouting.bundle.93737985e234f27edd4a.js","sourcesContent":["import { connect } from 'react-redux';\r\nimport { CineDialog } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport csTools from 'cornerstone-tools';\r\nimport { commandsManager } from './../App.js';\r\n// Our target output kills the `as` and \"import\" throws a keyword error\r\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nconst toolImport = csTools.import;\r\nconst scrollToIndex = toolImport('util/scrollToIndex');\r\nconst { setViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// Why do I need or care about any of this info?\r\n// A dispatch action should be able to pull this at the time of an event?\r\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\r\nconst mapStateToProps = state => {\r\n  // Get activeViewport's `cine` and `stack`\r\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\r\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\r\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\r\n\r\n  const cineData = cine || {\r\n    isPlaying: false,\r\n    cineFrameRate: 24,\r\n  };\r\n\r\n  // New props we're creating?\r\n  return {\r\n    activeEnabledElement: dom,\r\n    activeViewportCineData: cineData,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\r\n  const {\r\n    activeEnabledElement,\r\n    activeViewportCineData,\r\n    activeViewportIndex,\r\n  } = propsFromState;\r\n\r\n  return {\r\n    cineFrameRate: activeViewportCineData.cineFrameRate,\r\n    isPlaying: activeViewportCineData.isPlaying,\r\n    onPlayPauseChanged: isPlaying => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.isPlaying = !cine.isPlaying;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onFrameRateChanged: frameRate => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.cineFrameRate = frameRate;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onClickNextButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\r\n      if (currentImageIdIndex >= imageIds.length - 1) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\r\n    },\r\n    onClickBackButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex } = stackData.data[0];\r\n      if (currentImageIdIndex === 0) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\r\n    },\r\n    onClickSkipToStart: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      scrollToIndex(activeEnabledElement, 0);\r\n    },\r\n    onClickSkipToEnd: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const lastIndex = stackData.data[0].imageIds.length - 1;\r\n      scrollToIndex(activeEnabledElement, lastIndex);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCineDialog = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(CineDialog);\r\n\r\nexport default ConnectedCineDialog;\r\n","import { LayoutButton } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\n\r\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentLayout: state.viewports.layout,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // TODO: Change if layout switched becomes more complex\r\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\r\n      const viewports = [];\r\n      const numRows = selectedCell.row + 1;\r\n      const numColumns = selectedCell.col + 1;\r\n      const numViewports = numRows * numColumns;\r\n\r\n      for (let i = 0; i < numViewports; i++) {\r\n        // Hacky way to allow users to exit MPR \"mode\"\r\n        const viewport = currentLayout.viewports[i];\r\n        let plugin = viewport && viewport.plugin;\r\n        if (viewport && viewport.vtk) {\r\n          plugin = 'cornerstone';\r\n        }\r\n\r\n        viewports.push({\r\n          plugin,\r\n        });\r\n      }\r\n      const layout = {\r\n        numRows,\r\n        numColumns,\r\n        viewports,\r\n      };\r\n\r\n      const maxActiveIndex = numViewports - 1;\r\n      if (activeViewportIndex > maxActiveIndex) {\r\n        dispatch(setViewportActive(0));\r\n      }\r\n\r\n      dispatch(setLayout(layout));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch) => {\r\n  const onChangeFromDispatch = propsFromDispatch.onChange;\r\n  const { currentLayout, activeViewportIndex } = propsFromState;\r\n\r\n  return {\r\n    onChange: selectedCell =>\r\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\r\n  };\r\n};\r\n\r\nconst ConnectedLayoutButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(LayoutButton);\r\n\r\nexport default ConnectedLayoutButton;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport {\r\n  ExpandableToolMenu,\r\n  RoundedButtonGroup,\r\n  ToolbarButton,\r\n  withModal,\r\n  withDialog,\r\n} from '@ohif/ui';\r\n\r\nimport './ToolbarRow.css';\r\nimport { commandsManager, extensionManager } from './../App.js';\r\n\r\nimport ConnectedCineDialog from './ConnectedCineDialog';\r\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\r\nimport { withAppContext } from '../context/AppContext';\r\n\r\nclass ToolbarRow extends Component {\r\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\r\n  // closed if selected is null/undefined\r\n  static propTypes = {\r\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\r\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\r\n    selectedLeftSidePanel: PropTypes.string.isRequired,\r\n    selectedRightSidePanel: PropTypes.string.isRequired,\r\n    handleSidePanelChange: PropTypes.func.isRequired,\r\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    studies: PropTypes.array,\r\n    t: PropTypes.func.isRequired,\r\n    // NOTE: withDialog, withModal HOCs\r\n    dialog: PropTypes.any,\r\n    modal: PropTypes.any,\r\n  };\r\n\r\n  static defaultProps = {\r\n    studies: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\r\n    // TODO:\r\n    // If it's a tool that can be active... Mark it as active?\r\n    // - Tools that are on/off?\r\n    // - Tools that can be bound to multiple buttons?\r\n\r\n    // Normal ToolbarButtons...\r\n    // Just how high do we need to hoist this state?\r\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\r\n    this.state = {\r\n      toolbarButtons: toolbarButtonDefinitions,\r\n      activeButtons: [],\r\n    };\r\n\r\n    this.seriesPerStudyCount = [];\r\n\r\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\r\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\r\n      this\r\n    );\r\n\r\n    this.updateButtonGroups();\r\n  }\r\n\r\n  updateButtonGroups() {\r\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    this.buttonGroups = {\r\n      left: [],\r\n      right: [],\r\n    };\r\n\r\n    // ~ FIND MENU OPTIONS\r\n    panelModules.forEach(panelExtension => {\r\n      const panelModule = panelExtension.module;\r\n      const defaultContexts = Array.from(panelModule.defaultContext);\r\n\r\n      panelModule.menuOptions.forEach(menuOption => {\r\n        const contexts = Array.from(menuOption.context || defaultContexts);\r\n        const hasActiveContext = this.props.activeContexts.some(actx =>\r\n          contexts.includes(actx)\r\n        );\r\n\r\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\r\n        // Note: This does not cleanly handle `studies` prop updating with panel open\r\n        const isDisabled =\r\n          typeof menuOption.isDisabled === 'function' &&\r\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\r\n\r\n        if (hasActiveContext && !isDisabled) {\r\n          const menuOptionEntry = {\r\n            value: menuOption.target,\r\n            icon: menuOption.icon,\r\n            bottomLabel: menuOption.label,\r\n            badgeNumber: menuOption.badgeNumber,\r\n            stateEvent: menuOption.stateEvent,\r\n          };\r\n          const from = menuOption.from || 'right';\r\n\r\n          this.buttonGroups[from].push(menuOptionEntry);\r\n        }\r\n      });\r\n    });\r\n\r\n    // TODO: This should come from extensions, instead of being baked in\r\n    this.buttonGroups.left.unshift({\r\n      value: 'studies',\r\n      icon: 'th-large',\r\n      bottomLabel: this.props.t('Series'),\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*\r\n     * TODO: Improve the way we notify parts of the app\r\n     * that depends on derived display sets to be loaded.\r\n     * (Implement pubsub for better tracking of derived display sets)\r\n     */\r\n    document.addEventListener(\r\n      'deriveddisplaysetsloadedandcached',\r\n      this._onDerivedDisplaySetsLoadedAndCached\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\r\n      'deriveddisplaysetsloadedandcached',\r\n      this._onDerivedDisplaySetsLoadedAndCached\r\n    );\r\n  }\r\n\r\n  _onDerivedDisplaySetsLoadedAndCached() {\r\n    this.updateButtonGroups();\r\n    this.setState({\r\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const activeContextsChanged =\r\n      prevProps.activeContexts !== this.props.activeContexts;\r\n\r\n    const prevStudies = prevProps.studies;\r\n    const prevActiveViewport = prevProps.activeViewport;\r\n    const activeViewport = this.props.activeViewport;\r\n    const studies = this.props.studies;\r\n    const seriesPerStudyCount = this.seriesPerStudyCount;\r\n\r\n    let shouldUpdate = false;\r\n\r\n    if (\r\n      prevStudies.length !== studies.length ||\r\n      prevActiveViewport !== activeViewport\r\n    ) {\r\n      shouldUpdate = true;\r\n    } else {\r\n      for (let i = 0; i < studies.length; i++) {\r\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\r\n          seriesPerStudyCount[i] = studies[i].series.length;\r\n\r\n          shouldUpdate = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (shouldUpdate) {\r\n      this.updateButtonGroups();\r\n    }\r\n\r\n    if (activeContextsChanged) {\r\n      this.setState(\r\n        {\r\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n        },\r\n        this.closeCineDialogIfNotApplicable\r\n      );\r\n    }\r\n  }\r\n\r\n  closeCineDialogIfNotApplicable = () => {\r\n    const { dialog } = this.props;\r\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\r\n    if (dialogId) {\r\n      const cineButtonPresent = toolbarButtons.find(\r\n        button => button.options && button.options.behavior === 'CINE'\r\n      );\r\n      if (!cineButtonPresent) {\r\n        dialog.dismiss({ id: dialogId });\r\n        activeButtons = activeButtons.filter(\r\n          button => button.options && button.options.behavior !== 'CINE'\r\n        );\r\n        this.setState({ dialogId: null, activeButtons });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const buttonComponents = _getButtonComponents.call(\r\n      this,\r\n      this.state.toolbarButtons,\r\n      this.state.activeButtons\r\n    );\r\n\r\n    const onPress = (side, value) => {\r\n      this.props.handleSidePanelChange(side, value);\r\n    };\r\n    const onPressLeft = onPress.bind(this, 'left');\r\n    const onPressRight = onPress.bind(this, 'right');\r\n\r\n    return (\r\n      <>\r\n        <div className=\"ToolbarRow\">\r\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\r\n            <RoundedButtonGroup\r\n              options={this.buttonGroups.left}\r\n              value={this.props.selectedLeftSidePanel || ''}\r\n              onValueChanged={onPressLeft}\r\n            />\r\n          </div>\r\n          {buttonComponents}\r\n          <ConnectedLayoutButton />\r\n          <div\r\n            className=\"pull-right m-t-1 rm-x-1\"\r\n            style={{ marginLeft: 'auto' }}\r\n          >\r\n            {this.buttonGroups.right.length && (\r\n              <RoundedButtonGroup\r\n                options={this.buttonGroups.right}\r\n                value={this.props.selectedRightSidePanel || ''}\r\n                onValueChanged={onPressRight}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getCustomButtonComponent(button, activeButtons) {\r\n  const CustomComponent = button.CustomComponent;\r\n  const isValidComponent = typeof CustomComponent === 'function';\r\n\r\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\r\n  if (isValidComponent) {\r\n    const parentContext = this;\r\n    const activeButtonsIds = activeButtons.map(button => button.id);\r\n    const isActive = activeButtonsIds.includes(button.id);\r\n\r\n    return (\r\n      <CustomComponent\r\n        parentContext={parentContext}\r\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\r\n        button={button}\r\n        key={button.id}\r\n        activeButtons={activeButtonsIds}\r\n        isActive={isActive}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getExpandableButtonComponent(button, activeButtons) {\r\n  // Iterate over button definitions and update `onClick` behavior\r\n  let activeCommand;\r\n  const childButtons = button.buttons.map(childButton => {\r\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\r\n\r\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\r\n      activeCommand = childButton.id;\r\n    }\r\n\r\n    return childButton;\r\n  });\r\n\r\n  return (\r\n    <ExpandableToolMenu\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      buttons={childButtons}\r\n      activeCommand={activeCommand}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getDefaultButtonComponent(button, activeButtons) {\r\n  return (\r\n    <ToolbarButton\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      onClick={_handleToolbarButtonClick.bind(this, button)}\r\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\r\n    />\r\n  );\r\n}\r\n/**\r\n * Determine which extension buttons should be showing, if they're\r\n * active, and what their onClick behavior should be.\r\n */\r\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\r\n  const _this = this;\r\n  return toolbarButtons.map(button => {\r\n    const hasCustomComponent = button.CustomComponent;\r\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\r\n\r\n    if (hasCustomComponent) {\r\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    if (hasNestedButtonDefinitions) {\r\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\r\n  });\r\n}\r\n\r\n/**\r\n * TODO: DEPRECATE\r\n * This is used exclusively in `extensions/cornerstone/src`\r\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\r\n *\r\n * A handy way for us to handle different button types. IE. firing commands for\r\n * buttons, or initiation built in behavior.\r\n *\r\n * @param {*} button\r\n * @param {*} evt\r\n * @param {*} props\r\n */\r\nfunction _handleToolbarButtonClick(button, evt, props) {\r\n  const { activeButtons } = this.state;\r\n\r\n  if (button.commandName) {\r\n    const options = Object.assign({ evt }, button.commandOptions);\r\n    commandsManager.runCommand(button.commandName, options);\r\n  }\r\n\r\n  // TODO: Use Types ENUM\r\n  // TODO: We can update this to be a `getter` on the extension to query\r\n  //       For the active tools after we apply our updates?\r\n  if (button.type === 'setToolActive') {\r\n    const toggables = activeButtons.filter(\r\n      ({ options }) => options && !options.togglable\r\n    );\r\n    this.setState({ activeButtons: [...toggables, button] });\r\n  } else if (button.type === 'builtIn') {\r\n    this._handleBuiltIn(button);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _getVisibleToolbarButtons() {\r\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\r\n  const toolbarButtonDefinitions = [];\r\n\r\n  toolbarModules.forEach(extension => {\r\n    const { definitions, defaultContext } = extension.module;\r\n    definitions.forEach(definition => {\r\n      const context = definition.context || defaultContext;\r\n\r\n      if (this.props.activeContexts.includes(context)) {\r\n        toolbarButtonDefinitions.push(definition);\r\n      }\r\n    });\r\n  });\r\n\r\n  return toolbarButtonDefinitions;\r\n}\r\n\r\nfunction _handleBuiltIn(button) {\r\n  /* TODO: Keep cine button active until its unselected. */\r\n  const { dialog, t } = this.props;\r\n  const { dialogId } = this.state;\r\n  const { id, options } = button;\r\n\r\n  if (options.behavior === 'CINE') {\r\n    if (dialogId) {\r\n      dialog.dismiss({ id: dialogId });\r\n      this.setState(state => ({\r\n        dialogId: null,\r\n        activeButtons: [\r\n          ...state.activeButtons.filter(button => button.id !== id),\r\n        ],\r\n      }));\r\n    } else {\r\n      const spacing = 20;\r\n      const { x, y } = document\r\n        .querySelector(`.ViewerMain`)\r\n        .getBoundingClientRect();\r\n      const newDialogId = dialog.create({\r\n        content: ConnectedCineDialog,\r\n        defaultPosition: {\r\n          x: x + spacing || 0,\r\n          y: y + spacing || 0,\r\n        },\r\n      });\r\n      this.setState(state => ({\r\n        dialogId: newDialogId,\r\n        activeButtons: [...state.activeButtons, button],\r\n      }));\r\n    }\r\n  }\r\n\r\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\r\n    commandsManager.runCommand('showDownloadViewportModal', {\r\n      title: t('Download High Quality Image'),\r\n    });\r\n  }\r\n}\r\n\r\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\r\n  withModal(withDialog(withAppContext(ToolbarRow)))\r\n);\r\n","import OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport findDisplaySetByUID from './findDisplaySetByUID';\r\nimport { servicesManager } from './../App.js';\r\nimport { StudyBrowser } from '../../../ui/src/components/studyBrowser/StudyBrowser';\r\n\r\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onThumbnailClick: displaySetInstanceUID => {\r\n      let displaySet = findDisplaySetByUID(\r\n        ownProps.studyMetadata,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      const { LoggerService, UINotificationService } = servicesManager.services;\r\n\r\n      if (displaySet.isDerived) {\r\n        const { Modality } = displaySet;\r\n        if (Modality === 'SEG' && servicesManager) {\r\n          const onDisplaySetLoadFailureHandler = error => {\r\n            const message =\r\n              error.message.includes('orthogonal') ||\r\n              error.message.includes('oblique')\r\n                ? 'The segmentation has been detected as non coplanar,\\\r\n                If you really think it is coplanar,\\\r\n                please adjust the tolerance in the segmentation panel settings (at your own peril!)'\r\n                : error.message;\r\n\r\n            LoggerService.error({ error, message });\r\n            UINotificationService.show({\r\n              title: 'DICOM Segmentation Loader',\r\n              message,\r\n              type: 'error',\r\n              autoClose: false,\r\n            });\r\n          };\r\n\r\n          const {\r\n            referencedDisplaySet,\r\n            activatedLabelmapPromise,\r\n          } = displaySet.getSourceDisplaySet(\r\n            ownProps.studyMetadata,\r\n            true,\r\n            onDisplaySetLoadFailureHandler\r\n          );\r\n          displaySet = referencedDisplaySet;\r\n\r\n          activatedLabelmapPromise.then(activatedLabelmapIndex => {\r\n            const selectionFired = new CustomEvent(\r\n              'extensiondicomsegmentationsegselected',\r\n              {\r\n                detail: { activatedLabelmapIndex: activatedLabelmapIndex },\r\n              }\r\n            );\r\n            const segThumbnailSelected = new CustomEvent('segseriesselected');\r\n            document.dispatchEvent(selectionFired);\r\n            document.dispatchEvent(segThumbnailSelected);\r\n          });\r\n        } else if (Modality !== 'SR') {\r\n          displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\r\n        }\r\n\r\n        if (!displaySet) {\r\n          const error = new Error(\r\n            `Referenced series for ${Modality} dataset not present.`\r\n          );\r\n          const message = `Referenced series for ${Modality} dataset not present.`;\r\n          LoggerService.error({ error, message });\r\n          UINotificationService.show({\r\n            autoClose: false,\r\n            title: 'Fail to load series',\r\n            message,\r\n            type: 'error',\r\n          });\r\n        }\r\n      }\r\n\r\n      if (!displaySet) {\r\n        const error = new Error('Source data not present');\r\n        const message = 'Source data not present';\r\n        LoggerService.error({ error, message });\r\n        UINotificationService.show({\r\n          autoClose: false,\r\n          title: 'Fail to load series',\r\n          message,\r\n          type: 'error',\r\n        });\r\n      }\r\n\r\n      if (displaySet.isSOPClassUIDSupported === false) {\r\n        const error = new Error('Modality not supported');\r\n        const message = 'Modality not supported';\r\n        LoggerService.error({ error, message });\r\n        UINotificationService.show({\r\n          autoClose: false,\r\n          title: 'Fail to load series',\r\n          message,\r\n          type: 'error',\r\n        });\r\n      }\r\n\r\n      dispatch(setActiveViewportSpecificData(displaySet));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedStudyBrowser = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(StudyBrowser);\r\n\r\nexport default ConnectedStudyBrowser;\r\n","/**\r\n * Finds displaySet by UID across all displaySets inside studyMetadata\r\n * @param {Array} studyMetadata\r\n * @param {string} displaySetInstanceUID\r\n */\r\nexport default function findDisplaySetByUID(\r\n  studyMetadata,\r\n  displaySetInstanceUID\r\n) {\r\n  if (!Array.isArray(studyMetadata)) return null;\r\n\r\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\r\n    let currentDisplaySet = [];\r\n    if (current && Array.isArray(current.displaySets)) {\r\n      currentDisplaySet = current.displaySets;\r\n    }\r\n    return all.concat(currentDisplaySet);\r\n  }, []);\r\n\r\n  const bySetInstanceUID = ds =>\r\n    ds.displaySetInstanceUID === displaySetInstanceUID;\r\n\r\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\r\n  return displaySet || null;\r\n}\r\n","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './ViewportPane.css';\r\n\r\nconst ViewportPane = function (props) {\r\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\r\n  const [{ hovered, highlighted }, drop] = useDrop({\r\n    accept: 'thumbnail',\r\n    drop: (droppedItem, monitor) => {\r\n      const canDrop = monitor.canDrop();\r\n      const isOver = monitor.isOver();\r\n\r\n      if (canDrop && isOver && onDrop) {\r\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\r\n\r\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\r\n      }\r\n    },\r\n    // Monitor, and collect props.\r\n    // Returned as values by `useDrop`\r\n    collect: monitor => ({\r\n      highlighted: monitor.canDrop(),\r\n      hovered: monitor.isOver(),\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'viewport-drop-target',\r\n        { hovered: hovered },\r\n        { highlighted: highlighted },\r\n        propClassName\r\n      )}\r\n      ref={drop}\r\n      data-cy={`viewport-container-${viewportIndex}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportPane.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  onDrop: PropTypes.func.isRequired,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default ViewportPane;\r\n","import './ViewportGrid.css';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { utils } from '@ohif/core';\r\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\r\n//\r\nimport ViewportPane from './ViewportPane.js';\r\nimport DefaultViewport from './DefaultViewport.js';\r\nimport EmptyViewport from './EmptyViewport.js';\r\n\r\nconst { loadAndCacheDerivedDisplaySets } = utils;\r\n\r\nconst ViewportGrid = function(props) {\r\n  const {\r\n    activeViewportIndex,\r\n    availablePlugins,\r\n    defaultPlugin: defaultPluginName,\r\n    layout,\r\n    numRows,\r\n    numColumns,\r\n    setViewportData,\r\n    studies,\r\n    viewportData,\r\n    children,\r\n    isStudyLoaded,\r\n  } = props;\r\n\r\n  const rowSize = 100 / numRows;\r\n  const colSize = 100 / numColumns;\r\n\r\n  // http://grid.malven.co/\r\n  if (!viewportData || !viewportData.length) {\r\n    return null;\r\n  }\r\n\r\n  const snackbar = useSnackbarContext();\r\n  const logger = useLogger();\r\n\r\n  useEffect(() => {\r\n    if (isStudyLoaded) {\r\n      viewportData.forEach(displaySet => {\r\n        loadAndCacheDerivedDisplaySets(displaySet, studies, logger, snackbar);\r\n      });\r\n    }\r\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\r\n\r\n  const getViewportPanes = () =>\r\n    layout.viewports.map((layout, viewportIndex) => {\r\n      const displaySet = viewportData[viewportIndex];\r\n\r\n      if (!displaySet) {\r\n        return null;\r\n      }\r\n\r\n      const data = {\r\n        displaySet,\r\n        studies,\r\n      };\r\n\r\n      // JAMES TODO:\r\n\r\n      // Use whichever plugin is currently in use in the panel\r\n      // unless nothing is specified. If nothing is specified\r\n      // and the display set has a plugin specified, use that.\r\n      //\r\n      // TODO: Change this logic to:\r\n      // - Plugins define how capable they are of displaying a SopClass\r\n      // - When updating a panel, ensure that the currently enabled plugin\r\n      // in the viewport is capable of rendering this display set. If not\r\n      // then use the most capable available plugin\r\n\r\n      const pluginName =\r\n        !layout.plugin && displaySet && displaySet.plugin\r\n          ? displaySet.plugin\r\n          : layout.plugin;\r\n\r\n      const ViewportComponent = _getViewportComponent(\r\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\r\n        viewportIndex,\r\n        children,\r\n        availablePlugins,\r\n        pluginName,\r\n        defaultPluginName\r\n      );\r\n\r\n      return (\r\n        <ViewportPane\r\n          onDrop={setViewportData}\r\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\r\n          className={classNames('viewport-container', {\r\n            active: activeViewportIndex === viewportIndex,\r\n          })}\r\n          key={viewportIndex}\r\n        >\r\n          {ViewportComponent}\r\n        </ViewportPane>\r\n      );\r\n    });\r\n\r\n  const ViewportPanes = React.useMemo(getViewportPanes, [\r\n    layout,\r\n    viewportData,\r\n    studies,\r\n    children,\r\n    availablePlugins,\r\n    defaultPluginName,\r\n    setViewportData,\r\n    activeViewportIndex,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      data-cy=\"viewprt-grid\"\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\r\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\r\n        height: '100%',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      {ViewportPanes}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportGrid.propTypes = {\r\n  viewportData: PropTypes.array.isRequired,\r\n  supportsDrop: PropTypes.bool.isRequired,\r\n  activeViewportIndex: PropTypes.number.isRequired,\r\n  layout: PropTypes.object.isRequired,\r\n  availablePlugins: PropTypes.object.isRequired,\r\n  setViewportData: PropTypes.func.isRequired,\r\n  studies: PropTypes.array,\r\n  children: PropTypes.node,\r\n  defaultPlugin: PropTypes.string,\r\n  numRows: PropTypes.number.isRequired,\r\n  numColumns: PropTypes.number.isRequired,\r\n};\r\n\r\nViewportGrid.defaultProps = {\r\n  viewportData: [],\r\n  numRows: 1,\r\n  numColumns: 1,\r\n  layout: {\r\n    viewports: [{}],\r\n  },\r\n  activeViewportIndex: 0,\r\n  supportsDrop: true,\r\n  availablePlugins: {\r\n    DefaultViewport,\r\n  },\r\n  defaultPlugin: 'defaultViewportPlugin',\r\n};\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} plugin\r\n * @param {*} viewportData\r\n * @param {*} viewportIndex\r\n * @param {*} children\r\n * @returns\r\n */\r\nfunction _getViewportComponent(\r\n  viewportData,\r\n  viewportIndex,\r\n  children,\r\n  availablePlugins,\r\n  pluginName,\r\n  defaultPluginName\r\n) {\r\n  if (viewportData.displaySet) {\r\n    pluginName = pluginName || defaultPluginName;\r\n    const ViewportComponent = availablePlugins[pluginName];\r\n\r\n    if (!ViewportComponent) {\r\n      throw new Error(\r\n        `No Viewport Component available for name ${pluginName}.\r\n         Available plugins: ${JSON.stringify(availablePlugins)}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewportComponent\r\n        viewportData={viewportData}\r\n        viewportIndex={viewportIndex}\r\n        children={[children]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <EmptyViewport />;\r\n}\r\n\r\nexport default ViewportGrid;\r\n","/**\r\n *\r\n *\r\n * @export\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function DefaultViewport(props) {\r\n  return <div>{JSON.stringify(props)}</div>;\r\n}\r\n","import ViewportGrid from './ViewportGrid.js';\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { extensionManager } from './../../App.js';\r\nimport memoize from 'lodash/memoize';\r\n\r\nconst getAvailableViewportModules = memoize(viewportModules => {\r\n  const availableViewportModules = {};\r\n  viewportModules.forEach(moduleDefinition => {\r\n    availableViewportModules[moduleDefinition.extensionId] =\r\n      moduleDefinition.module;\r\n  });\r\n  return availableViewportModules;\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\r\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\r\n\r\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\r\n  let defaultPlugin;\r\n  if (viewportModules.length) {\r\n    defaultPlugin = viewportModules[0].extensionId;\r\n  }\r\n\r\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\r\n\r\n  return {\r\n    numRows,\r\n    numColumns,\r\n    layout,\r\n    activeViewportIndex,\r\n    // TODO: rename `availableViewportModules`\r\n    availablePlugins: availableViewportModules,\r\n    // TODO: rename `defaultViewportModule`\r\n    defaultPlugin,\r\n  };\r\n};\r\n\r\nconst ConnectedViewportGrid = connect(\r\n  mapStateToProps,\r\n  null\r\n)(ViewportGrid);\r\n\r\nexport default ConnectedViewportGrid;\r\n","import './ViewerMain.css';\r\nimport { servicesManager } from './../App.js';\r\nimport { Component } from 'react';\r\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport memoize from 'lodash/memoize';\r\nimport _values from 'lodash/values';\r\n\r\nvar values = memoize(_values);\r\n\r\nclass ViewerMain extends Component {\r\n  static propTypes = {\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    studies: PropTypes.array,\r\n    viewportSpecificData: PropTypes.object.isRequired,\r\n    layout: PropTypes.object.isRequired,\r\n    setViewportSpecificData: PropTypes.func.isRequired,\r\n    clearViewportSpecificData: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displaySets: [],\r\n    };\r\n  }\r\n\r\n  getDisplaySets(studies) {\r\n    const displaySets = [];\r\n    studies.forEach(study => {\r\n      study.displaySets.forEach(dSet => {\r\n        if (!dSet.plugin) {\r\n          dSet.plugin = 'cornerstone';\r\n        }\r\n        displaySets.push(dSet);\r\n      });\r\n    });\r\n\r\n    return displaySets;\r\n  }\r\n\r\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\r\n    const study = studies.find(study => {\r\n      return study.StudyInstanceUID === StudyInstanceUID;\r\n    });\r\n\r\n    if (!study) {\r\n      return;\r\n    }\r\n\r\n    return study.displaySets.find(displaySet => {\r\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add beforeUnload event handler to check for unsaved changes\r\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n\r\n    // Get all the display sets for the viewer studies\r\n    if (this.props.studies) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevViewportAmount = prevProps.layout.viewports.length;\r\n    const viewportAmount = this.props.layout.viewports.length;\r\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\r\n\r\n    if (\r\n      this.props.studies !== prevProps.studies ||\r\n      (viewportAmount !== prevViewportAmount && !isVtk)\r\n    ) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  fillEmptyViewportPanes = () => {\r\n    // TODO: Here is the entry point for filling viewports on load.\r\n    const dirtyViewportPanes = [];\r\n    const { layout, viewportSpecificData } = this.props;\r\n    const { displaySets } = this.state;\r\n\r\n    if (!displaySets || !displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < layout.viewports.length; i++) {\r\n      const viewportPane = viewportSpecificData[i];\r\n      const isNonEmptyViewport =\r\n        viewportPane &&\r\n        viewportPane.StudyInstanceUID &&\r\n        viewportPane.displaySetInstanceUID;\r\n\r\n      if (isNonEmptyViewport) {\r\n        dirtyViewportPanes.push({\r\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\r\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      const foundDisplaySet =\r\n        displaySets.find(\r\n          ds =>\r\n            !dirtyViewportPanes.some(\r\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\r\n            )\r\n        ) || displaySets[displaySets.length - 1];\r\n\r\n      dirtyViewportPanes.push(foundDisplaySet);\r\n    }\r\n\r\n    dirtyViewportPanes.forEach((vp, i) => {\r\n      if (vp && vp.StudyInstanceUID) {\r\n        this.setViewportData({\r\n          viewportIndex: i,\r\n          StudyInstanceUID: vp.StudyInstanceUID,\r\n          displaySetInstanceUID: vp.displaySetInstanceUID,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  setViewportData = ({\r\n    viewportIndex,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n  }) => {\r\n    let displaySet = this.findDisplaySet(\r\n      this.props.studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const { LoggerService, UINotificationService } = servicesManager.services;\r\n\r\n    if (displaySet.isDerived) {\r\n      const { Modality } = displaySet;\r\n      if (Modality === 'SEG' && servicesManager) {\r\n        const onDisplaySetLoadFailureHandler = error => {\r\n          const message =\r\n            error.message.includes('orthogonal') ||\r\n            error.message.includes('oblique')\r\n              ? 'The segmentation has been detected as non coplanar,\\\r\n              If you really think it is coplanar,\\\r\n              please adjust the tolerance in the segmentation panel settings (at your own peril!)'\r\n              : error.message;\r\n          LoggerService.error({ error, message });\r\n          UINotificationService.show({\r\n            title: 'DICOM Segmentation Loader',\r\n            message,\r\n            type: 'error',\r\n            autoClose: false,\r\n          });\r\n        };\r\n\r\n        const {\r\n          referencedDisplaySet,\r\n          activatedLabelmapPromise,\r\n        } = displaySet.getSourceDisplaySet(\r\n          this.props.studies,\r\n          true,\r\n          onDisplaySetLoadFailureHandler\r\n        );\r\n        displaySet = referencedDisplaySet;\r\n\r\n        activatedLabelmapPromise.then(activatedLabelmapIndex => {\r\n          const selectionFired = new CustomEvent(\r\n            'extensiondicomsegmentationsegselected',\r\n            {\r\n              detail: { activatedLabelmapIndex: activatedLabelmapIndex },\r\n            }\r\n          );\r\n          document.dispatchEvent(selectionFired);\r\n        });\r\n      } else if (Modality !== 'SR') {\r\n        displaySet = displaySet.getSourceDisplaySet(this.props.studies);\r\n      }\r\n\r\n      if (!displaySet) {\r\n        const error = new Error('Source data not present');\r\n        const message = 'Source data not present';\r\n        LoggerService.error({ error, message });\r\n        UINotificationService.show({\r\n          autoClose: false,\r\n          title: 'Fail to load series',\r\n          message,\r\n          type: 'error',\r\n        });\r\n      }\r\n    }\r\n\r\n    if (displaySet.isSOPClassUIDSupported === false) {\r\n      const error = new Error('Modality not supported');\r\n      const message = 'Modality not supported';\r\n      LoggerService.error({ error, message });\r\n      UINotificationService.show({\r\n        autoClose: false,\r\n        title: 'Fail to load series',\r\n        message,\r\n        type: 'error',\r\n      });\r\n    }\r\n\r\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\r\n  };\r\n\r\n  render() {\r\n    const { viewportSpecificData } = this.props;\r\n    const viewportData = values(viewportSpecificData);\r\n\r\n    return (\r\n      <div className=\"ViewerMain\">\r\n        {this.state.displaySets.length && (\r\n          <ConnectedViewportGrid\r\n            isStudyLoaded={this.props.isStudyLoaded}\r\n            studies={this.props.studies}\r\n            viewportData={viewportData}\r\n            setViewportData={this.setViewportData}\r\n          >\r\n            {/* Children to add to each viewport that support children */}\r\n          </ConnectedViewportGrid>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear the entire viewport specific data\r\n    const { viewportSpecificData } = this.props;\r\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\r\n      this.props.clearViewportSpecificData(viewportIndex);\r\n    });\r\n\r\n    // TODO: These don't have to be viewer specific?\r\n    // Could qualify for other routes?\r\n    // hotkeys.destroy();\r\n\r\n    // Remove beforeUnload event handler...\r\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n    // Destroy the synchronizer used to update reference lines\r\n    //OHIF.viewer.updateImageSynchronizer.destroy();\r\n    // TODO: Instruct all plugins to clean up themselves\r\n    //\r\n    // Clear references to all stacks in the StackManager\r\n    //StackManager.clearStacks();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.Studies collection\r\n    //OHIF.viewer.Studies.removeAll();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.StudyMetadataList collection\r\n    //OHIF.viewer.StudyMetadataList.removeAll();\r\n  }\r\n}\r\n\r\nexport default ViewerMain;\r\n","import OHIF from '@ohif/core';\r\nimport ViewerMain from './ViewerMain';\r\nimport { connect } from 'react-redux';\r\n\r\nconst {\r\n  setViewportSpecificData,\r\n  clearViewportSpecificData,\r\n} = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\r\n\r\n  return {\r\n    activeViewportIndex,\r\n    layout,\r\n    viewportSpecificData,\r\n    viewports: state.viewports,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerMain = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerMain);\r\n\r\nexport default ConnectedViewerMain;\r\n","import './SidePanel.css';\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nconst SidePanel = ({ from, isOpen, children, width }) => {\r\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\r\n\r\n  const styles = width\r\n    ? {\r\n        maxWidth: width,\r\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\r\n      }\r\n    : {};\r\n\r\n  return (\r\n    <section\r\n      style={styles}\r\n      className={classNames('sidepanel', fromSideClass, {\r\n        'is-open': isOpen,\r\n      })}\r\n    >\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSidePanel.propTypes = {\r\n  from: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  children: PropTypes.node,\r\n  width: PropTypes.string,\r\n};\r\n\r\nexport default SidePanel;\r\n","import React, { useState } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { ErrorBoundary, Icon } from '@ohif/ui';\r\nimport { servicesManager } from './../../App';\r\n\r\nimport './ErrorBoundaryDialog.css';\r\n\r\nconst { UIModalService } = servicesManager.services;\r\n\r\nconst ErrorBoundaryDialog = ({ context, children }) => {\r\n  const handleOnError = (error, componentStack) => {\r\n    const ErrorDialog = () => {\r\n      const [open, setOpen] = useState(false);\r\n\r\n      return (\r\n        <div className=\"ErrorFallback\" role=\"alert\">\r\n          <div className=\"ErrorBoundaryDialog\">\r\n            <h3 className=\"ErrorBoundaryDialogTitle\">\r\n              {context}: <span>{error.message}</span>\r\n            </h3>\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\r\n            onClick={() => setOpen(s => !s)}\r\n          >\r\n            <Icon\r\n              name=\"chevron-down\"\r\n              className={classnames('ErrorBoundaryDialogIcon', {\r\n                opened: open,\r\n              })}\r\n            />\r\n            Stack Trace\r\n          </button>\r\n\r\n          {open && <pre>{componentStack}</pre>}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    UIModalService.show({\r\n      content: ErrorDialog,\r\n      title: `Something went wrong in ${context}`,\r\n    });\r\n  };\r\n\r\n  const fallbackComponent = () => (\r\n    <div className=\"ErrorFallback\" role=\"alert\">\r\n      <p>\r\n        Error rendering {context}. <br /> Check the browser console for more\r\n        details.\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ErrorBoundary\r\n      fallbackComponent={fallbackComponent}\r\n      context={context}\r\n      onError={handleOnError}\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nErrorBoundaryDialog.propTypes = {\r\n  context: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import React, { useEffect } from 'react';\r\nimport { classes, utils } from '@ohif/core';\r\nimport PropTypes from 'prop-types';\r\nimport cs from 'cornerstone-core';\r\n\r\nimport './StudyPrefetcher.css';\r\n\r\nconst StudyPrefetcher = ({ studies, options }) => {\r\n  useEffect(() => {\r\n    const studyPrefetcher = classes.StudyPrefetcher.getInstance(\r\n      studies,\r\n      options\r\n    );\r\n    const studiesMetadata = studies.map(s =>\r\n      utils.studyMetadataManager.get(s.StudyInstanceUID)\r\n    );\r\n    studyPrefetcher.setStudies(studiesMetadata);\r\n\r\n    const onNewImage = ({ detail }) => {\r\n      /**\r\n       * When images are cached the viewport will load instantly and\r\n       * the display sets will not be available at this point in time.\r\n       *\r\n       * This code add display sets and updates the study prefetcher metadata.\r\n       */\r\n      const studiesMetadata = studies.map(s => {\r\n        const studyMetadata = utils.studyMetadataManager.get(\r\n          s.StudyInstanceUID\r\n        );\r\n        const displaySets = studyMetadata.getDisplaySets();\r\n        if (!displaySets || displaySets.length < 1) {\r\n          s.displaySets.forEach(ds => studyMetadata.addDisplaySet(ds));\r\n        }\r\n        return studyMetadata;\r\n      });\r\n      studyPrefetcher.setStudies(studiesMetadata);\r\n\r\n      const study = studyPrefetcher.getStudy(detail.image);\r\n      const series = studyPrefetcher.getSeries(study, detail.image);\r\n      const instance = studyPrefetcher.getInstance(series, detail.image);\r\n\r\n      if (study.displaySets && study.displaySets.length > 0) {\r\n        const {\r\n          displaySetInstanceUID,\r\n        } = studyPrefetcher.getDisplaySetBySOPInstanceUID(\r\n          study.displaySets,\r\n          instance\r\n        );\r\n        studyPrefetcher.prefetch(detail.element, displaySetInstanceUID);\r\n      }\r\n    };\r\n\r\n    const onElementEnabled = ({ detail }) => {\r\n      detail.element.addEventListener(cs.EVENTS.NEW_IMAGE, onNewImage);\r\n    };\r\n\r\n    cs.events.addEventListener(cs.EVENTS.ELEMENT_ENABLED, onElementEnabled);\r\n\r\n    return () => {\r\n      cs.events.removeEventListener(\r\n        cs.EVENTS.ELEMENT_ENABLED,\r\n        onElementEnabled\r\n      );\r\n      studyPrefetcher.destroy();\r\n    };\r\n  }, [options, studies]);\r\n\r\n  return null;\r\n};\r\n\r\nStudyPrefetcher.propTypes = {\r\n  studies: PropTypes.array.isRequired,\r\n  options: PropTypes.shape({\r\n    enabled: PropTypes.bool,\r\n    order: PropTypes.string,\r\n    displaySetCount: PropTypes.number,\r\n    preventCache: PropTypes.bool,\r\n    prefetchDisplaySetsTimeout: PropTypes.number,\r\n    includeActiveDisplaySet: PropTypes.bool,\r\n  }),\r\n};\r\n\r\nStudyPrefetcher.defaultProps = {\r\n  options: {\r\n    order: 'closest',\r\n    displaySetCount: 1,\r\n    preventCache: false,\r\n    prefetchDisplaySetsTimeout: 300,\r\n    includeActiveDisplaySet: false,\r\n  },\r\n};\r\n\r\nexport default StudyPrefetcher;\r\n","import { useEffect } from 'react';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { StudyLoadingListener } = OHIF.classes;\r\n\r\nconst StudyLoadingMonitor = ({ studies }) => {\r\n  useEffect(() => {\r\n    const studyLoadingListener = StudyLoadingListener.getInstance();\r\n\r\n    if (studies && studies.length > 0) {\r\n      studyLoadingListener.clear();\r\n      studyLoadingListener.addStudies(studies);\r\n    }\r\n\r\n    return () => {\r\n      studyLoadingListener.clear();\r\n    };\r\n  }, [studies]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default StudyLoadingMonitor;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\r\nimport { withDialog } from '@ohif/ui';\r\nimport moment from 'moment';\r\n\r\nimport ConnectedHeader from './ConnectedHeader.js';\r\nimport ToolbarRow from './ToolbarRow.js';\r\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\r\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\r\nimport SidePanel from './../components/SidePanel.js';\r\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\r\nimport { extensionManager, servicesManager } from './../App.js';\r\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\r\n\r\n// Contexts\r\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\r\nimport UserManagerContext from '../context/UserManagerContext';\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport './Viewer.css';\r\nimport StudyPrefetcher from '../components/StudyPrefetcher.js';\r\nimport StudyLoadingMonitor from '../components/StudyLoadingMonitor';\r\n\r\nconst { studyMetadataManager } = OHIF.utils;\r\n\r\nclass Viewer extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        StudyInstanceUID: PropTypes.string.isRequired,\r\n        StudyDate: PropTypes.string,\r\n        PatientID: PropTypes.string,\r\n        displaySets: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            displaySetInstanceUID: PropTypes.string.isRequired,\r\n            SeriesDescription: PropTypes.string,\r\n            SeriesNumber: PropTypes.number,\r\n            InstanceNumber: PropTypes.number,\r\n            numImageFrames: PropTypes.number,\r\n            Modality: PropTypes.string.isRequired,\r\n            images: PropTypes.arrayOf(\r\n              PropTypes.shape({\r\n                getImageId: PropTypes.func.isRequired,\r\n              })\r\n            ),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n    studyInstanceUIDs: PropTypes.array,\r\n    activeServer: PropTypes.shape({\r\n      type: PropTypes.string,\r\n      wadoRoot: PropTypes.string,\r\n    }),\r\n    onTimepointsUpdated: PropTypes.func,\r\n    onMeasurementsUpdated: PropTypes.func,\r\n    // window.store.getState().viewports.viewportSpecificData\r\n    viewports: PropTypes.object.isRequired,\r\n    // window.store.getState().viewports.activeViewportIndex\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    isStudyLoaded: PropTypes.bool,\r\n    dialog: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { activeServer } = this.props;\r\n    const server = Object.assign({}, activeServer);\r\n\r\n    const external = { servicesManager };\r\n\r\n    OHIF.measurements.MeasurementApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: server => DICOMSR.retrieveMeasurements(server, external),\r\n        store: DICOMSR.storeMeasurements,\r\n      },\r\n      server,\r\n    });\r\n\r\n    OHIF.measurements.TimepointApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: this.retrieveTimepoints,\r\n        store: this.storeTimepoints,\r\n        remove: this.removeTimepoint,\r\n        update: this.updateTimepoint,\r\n        disassociate: this.disassociateStudy,\r\n      },\r\n    });\r\n\r\n    this._getActiveViewport = this._getActiveViewport.bind(this);\r\n  }\r\n\r\n  state = {\r\n    isLeftSidePanelOpen: true,\r\n    isRightSidePanelOpen: false,\r\n    selectedRightSidePanel: '',\r\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\r\n    thumbnails: [],\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.dialog) {\r\n      this.props.dialog.dismissAll();\r\n    }\r\n\r\n    document.removeEventListener(\r\n      'segmentationLoadingError',\r\n      this._updateThumbnails\r\n    );\r\n  }\r\n\r\n  retrieveTimepoints = filter => {\r\n    OHIF.log.info('retrieveTimepoints');\r\n\r\n    // Get the earliest and latest study date\r\n    let earliestDate = new Date().toISOString();\r\n    let latestDate = new Date().toISOString();\r\n    if (this.props.studies) {\r\n      latestDate = new Date('1000-01-01').toISOString();\r\n      this.props.studies.forEach(study => {\r\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\r\n        if (StudyDate < earliestDate) {\r\n          earliestDate = StudyDate;\r\n        }\r\n        if (StudyDate > latestDate) {\r\n          latestDate = StudyDate;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Return a generic timepoint\r\n    return Promise.resolve([\r\n      {\r\n        timepointType: 'baseline',\r\n        timepointId: 'TimepointId',\r\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\r\n        PatientID: filter.PatientID,\r\n        earliestDate,\r\n        latestDate,\r\n        isLocked: false,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  storeTimepoints = timepointData => {\r\n    OHIF.log.info('storeTimepoints');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  updateTimepoint = (timepointData, query) => {\r\n    OHIF.log.info('updateTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  removeTimepoint = timepointId => {\r\n    OHIF.log.info('removeTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\r\n    OHIF.log.info('disassociateStudy');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onTimepointsUpdated = timepoints => {\r\n    if (this.props.onTimepointsUpdated) {\r\n      this.props.onTimepointsUpdated(timepoints);\r\n    }\r\n  };\r\n\r\n  onMeasurementsUpdated = measurements => {\r\n    if (this.props.onMeasurementsUpdated) {\r\n      this.props.onMeasurementsUpdated(measurements);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { studies, isStudyLoaded } = this.props;\r\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\r\n    const currentTimepointId = 'TimepointId';\r\n\r\n    const timepointApi = new TimepointApi(currentTimepointId, {\r\n      onTimepointsUpdated: this.onTimepointsUpdated,\r\n    });\r\n\r\n    const measurementApi = new MeasurementApi(timepointApi, {\r\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\r\n    });\r\n\r\n    this.currentTimepointId = currentTimepointId;\r\n    this.timepointApi = timepointApi;\r\n    this.measurementApi = measurementApi;\r\n\r\n    if (studies) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n\r\n      timepointApi.retrieveTimepoints({ PatientID });\r\n      if (isStudyLoaded) {\r\n        this.measurementApi.retrieveMeasurements(PatientID, [\r\n          currentTimepointId,\r\n        ]);\r\n      }\r\n\r\n      const activeViewport = this.props.viewports[\r\n        this.props.activeViewportIndex\r\n      ];\r\n      const activeDisplaySetInstanceUID = activeViewport\r\n        ? activeViewport.displaySetInstanceUID\r\n        : undefined;\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(\r\n          studies,\r\n          activeDisplaySetInstanceUID\r\n        ),\r\n      });\r\n    }\r\n\r\n    document.addEventListener(\r\n      'segmentationLoadingError',\r\n      this._updateThumbnails.bind(this),\r\n      false\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      studies,\r\n      isStudyLoaded,\r\n      activeViewportIndex,\r\n      viewports,\r\n    } = this.props;\r\n\r\n    const activeViewport = viewports[activeViewportIndex];\r\n    const activeDisplaySetInstanceUID = activeViewport\r\n      ? activeViewport.displaySetInstanceUID\r\n      : undefined;\r\n\r\n    const prevActiveViewport =\r\n      prevProps.viewports[prevProps.activeViewportIndex];\r\n    const prevActiveDisplaySetInstanceUID = prevActiveViewport\r\n      ? prevActiveViewport.displaySetInstanceUID\r\n      : undefined;\r\n\r\n    if (\r\n      studies !== prevProps.studies ||\r\n      activeViewportIndex !== prevProps.activeViewportIndex ||\r\n      activeDisplaySetInstanceUID !== prevActiveDisplaySetInstanceUID\r\n    ) {\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(\r\n          studies,\r\n          activeDisplaySetInstanceUID\r\n        ),\r\n        activeDisplaySetInstanceUID,\r\n      });\r\n    }\r\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n      const { currentTimepointId } = this;\r\n\r\n      this.timepointApi.retrieveTimepoints({ PatientID });\r\n      this.measurementApi\r\n        .retrieveMeasurements(PatientID, [currentTimepointId])\r\n        .then(() => {\r\n          this._updateThumbnails();\r\n        });\r\n    }\r\n  }\r\n\r\n  _updateThumbnails() {\r\n    const { studies, activeViewportIndex, viewports } = this.props;\r\n\r\n    const activeViewport = viewports[activeViewportIndex];\r\n    const activeDisplaySetInstanceUID = activeViewport\r\n      ? activeViewport.displaySetInstanceUID\r\n      : undefined;\r\n\r\n    this.setState({\r\n      thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\r\n      activeDisplaySetInstanceUID,\r\n    });\r\n  }\r\n\r\n  _getActiveViewport() {\r\n    return this.props.viewports[this.props.activeViewportIndex];\r\n  }\r\n\r\n  render() {\r\n    let VisiblePanelLeft, VisiblePanelRight;\r\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    panelExtensions.forEach(panelExt => {\r\n      panelExt.module.components.forEach(comp => {\r\n        if (comp.id === this.state.selectedRightSidePanel) {\r\n          VisiblePanelRight = comp.component;\r\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\r\n          VisiblePanelLeft = comp.component;\r\n        }\r\n      });\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {/* HEADER */}\r\n        <WhiteLabelingContext.Consumer>\r\n          {whiteLabeling => (\r\n            <UserManagerContext.Consumer>\r\n              {userManager => (\r\n                <AppContext.Consumer>\r\n                  {appContext => (\r\n                    <ConnectedHeader\r\n                      linkText={\r\n                        appContext.appConfig.showStudyList\r\n                          ? 'Study List'\r\n                          : undefined\r\n                      }\r\n                      linkPath={\r\n                        appContext.appConfig.showStudyList ? '/' : undefined\r\n                      }\r\n                      userManager={userManager}\r\n                    >\r\n                      {whiteLabeling &&\r\n                        whiteLabeling.createLogoComponentFn &&\r\n                        whiteLabeling.createLogoComponentFn(React)}\r\n                    </ConnectedHeader>\r\n                  )}\r\n                </AppContext.Consumer>\r\n              )}\r\n            </UserManagerContext.Consumer>\r\n          )}\r\n        </WhiteLabelingContext.Consumer>\r\n        {/* TOOLBAR */}\r\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\r\n          <ToolbarRow\r\n            activeViewport={\r\n              this.props.viewports[this.props.activeViewportIndex]\r\n            }\r\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\r\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\r\n            selectedLeftSidePanel={\r\n              this.state.isLeftSidePanelOpen\r\n                ? this.state.selectedLeftSidePanel\r\n                : ''\r\n            }\r\n            selectedRightSidePanel={\r\n              this.state.isRightSidePanelOpen\r\n                ? this.state.selectedRightSidePanel\r\n                : ''\r\n            }\r\n            handleSidePanelChange={(side, selectedPanel) => {\r\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\r\n              const openKey = `is${sideClicked}SidePanelOpen`;\r\n              const selectedKey = `selected${sideClicked}SidePanel`;\r\n              const updatedState = Object.assign({}, this.state);\r\n\r\n              const isOpen = updatedState[openKey];\r\n              const prevSelectedPanel = updatedState[selectedKey];\r\n              // RoundedButtonGroup returns `null` if selected button is clicked\r\n              const isSameSelectedPanel =\r\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\r\n\r\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\r\n\r\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\r\n              if (isClosedOrShouldClose) {\r\n                updatedState[openKey] = !updatedState[openKey];\r\n              }\r\n\r\n              this.setState(updatedState);\r\n            }}\r\n            studies={this.props.studies}\r\n          />\r\n        </ErrorBoundaryDialog>\r\n        <AppContext.Consumer>\r\n          {appContext => <StudyLoadingMonitor studies={this.props.studies} />}\r\n        </AppContext.Consumer>\r\n        {/* VIEWPORTS + SIDEPANELS */}\r\n        <div className=\"FlexboxLayout\">\r\n          {/* LEFT */}\r\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\r\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\r\n              {VisiblePanelLeft ? (\r\n                <VisiblePanelLeft\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              ) : (\r\n                <AppContext.Consumer>\r\n                  {appContext => {\r\n                    const { appConfig } = appContext;\r\n                    const { studyPrefetcher } = appConfig;\r\n                    const { thumbnails } = this.state;\r\n                    return (\r\n                      <ConnectedStudyBrowser\r\n                        studies={thumbnails}\r\n                        studyMetadata={this.props.studies}\r\n                        showThumbnailProgressBar={\r\n                          studyPrefetcher &&\r\n                          studyPrefetcher.enabled &&\r\n                          studyPrefetcher.displayProgress\r\n                        }\r\n                      />\r\n                    );\r\n                  }}\r\n                </AppContext.Consumer>\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n\r\n          {/* MAIN */}\r\n          <div className={classNames('main-content')}>\r\n            <ErrorBoundaryDialog context=\"ViewerMain\">\r\n              <AppContext.Consumer>\r\n                {appContext => {\r\n                  const { appConfig } = appContext;\r\n                  const { studyPrefetcher } = appConfig;\r\n                  const { studies } = this.props;\r\n                  return (\r\n                    studyPrefetcher &&\r\n                    studyPrefetcher.enabled && (\r\n                      <StudyPrefetcher\r\n                        studies={studies}\r\n                        options={studyPrefetcher}\r\n                      />\r\n                    )\r\n                  );\r\n                }}\r\n              </AppContext.Consumer>\r\n              <ConnectedViewerMain\r\n                studies={this.props.studies}\r\n                isStudyLoaded={this.props.isStudyLoaded}\r\n              />\r\n            </ErrorBoundaryDialog>\r\n          </div>\r\n\r\n          {/* RIGHT */}\r\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\r\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\r\n              {VisiblePanelRight && (\r\n                <VisiblePanelRight\r\n                  isOpen={this.state.isRightSidePanelOpen}\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                  activeViewport={\r\n                    this.props.viewports[this.props.activeViewportIndex]\r\n                  }\r\n                  getActiveViewport={this._getActiveViewport}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withDialog(Viewer);\r\n\r\n/**\r\n * Async function to check if the displaySet has any derived one\r\n *\r\n * @param {*object} displaySet\r\n * @param {*object} study\r\n * @returns {bool}\r\n */\r\nconst _checkForDerivedDisplaySets = async function(displaySet, study) {\r\n  let derivedDisplaySetsNumber = 0;\r\n  if (\r\n    displaySet.Modality &&\r\n    !['SEG', 'SR', 'RTSTRUCT'].includes(displaySet.Modality)\r\n  ) {\r\n    const studyMetadata = studyMetadataManager.get(study.StudyInstanceUID);\r\n\r\n    const derivedDisplaySets = studyMetadata.getDerivedDatasets({\r\n      referencedSeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n    });\r\n\r\n    derivedDisplaySetsNumber = derivedDisplaySets.length;\r\n  }\r\n\r\n  return derivedDisplaySetsNumber > 0;\r\n};\r\n\r\n/**\r\n * Async function to check if there are any inconsistences in the series.\r\n *\r\n * For segmentation returns any error during loading.\r\n *\r\n * For reconstructable 3D volume:\r\n * 1) Is series multiframe?\r\n * 2) Do the frames have different dimensions/number of components/orientations?\r\n * 3) Has the series any missing frames or irregular spacing?\r\n * 4) Is the series 4D?\r\n *\r\n * If not reconstructable, MPR is disabled.\r\n * The actual computations are done in isDisplaySetReconstructable.\r\n *\r\n * @param {*object} displaySet\r\n * @returns {[string]} an array of strings containing the warnings\r\n */\r\nconst _checkForSeriesInconsistencesWarnings = async function(displaySet) {\r\n  const inconsistencyWarnings = [];\r\n\r\n  if (displaySet.Modality !== 'SEG') {\r\n    // warnings already checked and cached in displaySet\r\n    if (displaySet.inconsistencyWarnings) {\r\n      return displaySet.inconsistencyWarnings;\r\n    }\r\n\r\n    if (\r\n      displaySet.reconstructionIssues &&\r\n      displaySet.reconstructionIssues.length !== 0\r\n    ) {\r\n      displaySet.reconstructionIssues.forEach(warning => {\r\n        switch (warning) {\r\n          case ReconstructionIssues.DATASET_4D:\r\n            inconsistencyWarnings.push('The dataset is 4D.');\r\n            break;\r\n          case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\r\n            inconsistencyWarnings.push(\r\n              'The dataset frames have different dimensions (rows, columns).'\r\n            );\r\n            break;\r\n          case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\r\n            inconsistencyWarnings.push(\r\n              'The dataset frames have different components (Sample per pixel).'\r\n            );\r\n            break;\r\n          case ReconstructionIssues.VARYING_IMAGESORIENTATION:\r\n            inconsistencyWarnings.push(\r\n              'The dataset frames have different orientation.'\r\n            );\r\n            break;\r\n          case ReconstructionIssues.IRREGULAR_SPACING:\r\n            inconsistencyWarnings.push(\r\n              'The dataset frames have different pixel spacing.'\r\n            );\r\n            break;\r\n          case ReconstructionIssues.MULTIFFRAMES:\r\n            inconsistencyWarnings.push('The dataset is a multiframes.');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n      inconsistencyWarnings.push(\r\n        'The datasets is not a reconstructable 3D volume. MPR mode is not available.'\r\n      );\r\n    }\r\n\r\n    if (\r\n      displaySet.missingFrames &&\r\n      (!displaySet.reconstructionIssues ||\r\n        (displaySet.reconstructionIssues &&\r\n          !displaySet.reconstructionIssues.find(\r\n            warn => warn === ReconstructionIssues.DATASET_4D\r\n          )))\r\n    ) {\r\n      inconsistencyWarnings.push(\r\n        'The datasets is missing frames: ' + displaySet.missingFrames + '.'\r\n      );\r\n    }\r\n\r\n    if (displaySet.isSOPClassUIDSupported === false) {\r\n      inconsistencyWarnings.push('The datasets is not supported.');\r\n    }\r\n    displaySet.inconsistencyWarnings = inconsistencyWarnings;\r\n  } else {\r\n    if (displaySet.loadError) {\r\n      inconsistencyWarnings.push(displaySet.segLoadErrorMessagge);\r\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\r\n    }\r\n  }\r\n\r\n  return inconsistencyWarnings;\r\n};\r\n\r\n/**\r\n * Checks if display set is active, i.e. if the series is currently shown\r\n * in the active viewport.\r\n *\r\n * For data display set, this functions checks if the active\r\n * display set instance uid in the current active viewport is the same of the\r\n * thumbnail one.\r\n *\r\n * For derived modalities (e.g., SEG and RTSTRUCT), the function gets the\r\n * reference display set and then checks the reference uid with the active\r\n * display set instance uid.\r\n *\r\n * @param {displaySet} displaySet\r\n * @param {Study[]} studies\r\n * @param {string} activeDisplaySetInstanceUID\r\n * @returns {boolean} is active.\r\n */\r\nconst _isDisplaySetActive = function(\r\n  displaySet,\r\n  studies,\r\n  activeDisplaySetInstanceUID\r\n) {\r\n  let active = false;\r\n\r\n  const { displaySetInstanceUID } = displaySet;\r\n\r\n  // TO DO: in the future, we could possibly support new modalities\r\n  // we should have a list of all modalities here, instead of having hard coded checks\r\n  if (\r\n    displaySet.Modality !== 'SEG' &&\r\n    displaySet.Modality !== 'RTSTRUCT' &&\r\n    displaySet.Modality !== 'SR'\r\n  ) {\r\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\r\n  } else if (displaySet.Modality === 'SR') {\r\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\r\n\r\n    if (!active && displaySet.getSourceDisplaySet) {\r\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(\r\n        studies,\r\n        false\r\n      );\r\n      if (referencedDisplaySet && referencedDisplaySet.length !== 0) {\r\n        for (let i = 0; i < referencedDisplaySet.length; i++) {\r\n          if (\r\n            referencedDisplaySet[i].displaySetInstanceUID ===\r\n            activeDisplaySetInstanceUID\r\n          ) {\r\n            active = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else if (displaySet.getSourceDisplaySet) {\r\n    if (displaySet.Modality === 'SEG') {\r\n      const { referencedDisplaySet } = displaySet.getSourceDisplaySet(\r\n        studies,\r\n        false\r\n      );\r\n      active = referencedDisplaySet\r\n        ? activeDisplaySetInstanceUID ===\r\n          referencedDisplaySet.displaySetInstanceUID\r\n        : false;\r\n    } else {\r\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(\r\n        studies,\r\n        false\r\n      );\r\n      active = referencedDisplaySet\r\n        ? activeDisplaySetInstanceUID ===\r\n          referencedDisplaySet.displaySetInstanceUID\r\n        : false;\r\n    }\r\n  }\r\n\r\n  return active;\r\n};\r\n\r\n/**\r\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\r\n * a mapping layer?\r\n *\r\n * TODO[react]:\r\n * - Add showStackLoadingProgressBar option\r\n *\r\n * @param {Study[]} studies\r\n * @param {string} activeDisplaySetInstanceUID\r\n */\r\nconst _mapStudiesToThumbnails = function(studies, activeDisplaySetInstanceUID) {\r\n  return studies.map(study => {\r\n    const { StudyInstanceUID } = study;\r\n    const thumbnails = study.displaySets.map(displaySet => {\r\n      const {\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n      } = displaySet;\r\n\r\n      let imageId;\r\n      let altImageText;\r\n\r\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\r\n        altImageText = 'SEG';\r\n      } else if (displaySet.Modality && displaySet.Modality === 'SR') {\r\n        altImageText = 'SR';\r\n      } else if (displaySet.images && displaySet.images.length) {\r\n        const imageIndex = Math.floor(displaySet.images.length / 2);\r\n        imageId = displaySet.images[imageIndex].getImageId();\r\n      } else if (displaySet.isSOPClassUIDSupported === false) {\r\n        altImageText = displaySet.SOPClassUIDNaturalized;\r\n      } else {\r\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\r\n      }\r\n\r\n      const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet);\r\n\r\n      const hasDerivedDisplaySets = _checkForDerivedDisplaySets(\r\n        displaySet,\r\n        study\r\n      );\r\n\r\n      return {\r\n        active: _isDisplaySetActive(\r\n          displaySet,\r\n          studies,\r\n          activeDisplaySetInstanceUID\r\n        ),\r\n        imageId,\r\n        altImageText,\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n        hasWarnings,\r\n        hasDerivedDisplaySets,\r\n      };\r\n    });\r\n\r\n    return {\r\n      StudyInstanceUID,\r\n      thumbnails,\r\n    };\r\n  });\r\n};\r\n","import { connect } from 'react-redux';\r\nimport Viewer from './Viewer.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n  return servers.servers.find(isActive);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { viewports, servers } = state;\r\n  return {\r\n    viewports: viewports.viewportSpecificData,\r\n    activeViewportIndex: viewports.activeViewportIndex,\r\n    activeServer: getActiveServer(servers),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTimepointsUpdated: timepoints => {\r\n      dispatch(setTimepoints(timepoints));\r\n    },\r\n    onMeasurementsUpdated: measurements => {\r\n      dispatch(setMeasurements(measurements));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Viewer);\r\n\r\nexport default ConnectedViewer;\r\n"],"sourceRoot":""}